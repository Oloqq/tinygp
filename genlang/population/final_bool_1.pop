((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Expr . NOT) (Expr Num . -53) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr Num . 3) (Stat . LOAD) (Reg . 2) (Expr Num . -43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 12) ELSE (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr Num . 97) (Stat . IF) (Expr Num . 11) (Stat . OUTPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Expr . SUB) (Expr Num . 23) (Expr Num . 36) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 54) (Stat . LOAD) (Reg . 8) (Expr Num . 17) ELSE (Stat . OUTPUT) (Expr Num . 13) END (Stat . LOAD) (Reg . 6) (Expr Num . -60) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . INPUT) (Reg . 12) END (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . 97) (Stat . OUTPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 12) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr . NOT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr . EQ) (Expr Num . 49) (Reg . 8) (Stat . IF) (Expr Num . 6) (Stat . OUTPUT) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . IF) (Expr Num . -56) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 5) (Expr Num . 21) END END ELSE (Stat . IF) (Expr Num . -47) (Stat . IF) (Expr Num . 13) (Stat . INPUT) (Reg . 8) END ELSE (Stat . LOAD) (Reg . 10) (Expr . GT) (Expr Num . 6) (Reg . 2) END END (Stat . OUTPUT) (Expr Num . -94) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 19) (Stat . LOAD) (Reg . 6) (Expr Num . -79) ELSE (Stat . INPUT) (Reg . 2) END (Stat . IF) (Expr . LT) (Expr Num . -20) (Expr Num . -33) (Stat . IF) (Reg . 6) (Stat . IF) (Expr Num . -1) (Stat . IF) (Expr Num . -86) (Stat . INPUT) (Reg . 8) ELSE (Stat . IF) (Expr Num . -26) (Stat . INPUT) (Reg . 3) ELSE (Stat . INPUT) (Reg . 0) END END ELSE (Stat . INPUT) (Reg . 3) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Expr . SUB) (Reg . 12) (Reg . 2) (Stat . INPUT) (Reg . 11) ELSE (Stat . INPUT) (Reg . 12) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr Num . -33) (Stat . IF) (Expr . DIV) (Expr Num . 47) (Expr Num . -17) (Stat . INPUT) (Reg . 10) ELSE (Stat . LOAD) (Reg . 14) (Expr . NOT) (Reg . 12) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -67) (Stat . IF) (Expr Num . 67) (Stat . INPUT) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . -61) (Stat . LOAD) (Reg . 8) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -72) (Stat . LOAD) (Reg . 6) (Expr Num . -79) ELSE (Stat . IF) (Expr Num . -24) (Stat . OUTPUT) (Expr Num . -24) END END (Stat . LOAD) (Reg . 11) (Expr Num . 45) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . LOAD) (Reg . 10) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 84) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Reg . 14) (Stat . LOAD) (Reg . 9) (Expr . EQ) (Expr Num . 70) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Expr Num . 85) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -61) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Expr Num . 54) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 2) END (Stat . IF) (Reg . 5) (Stat . INPUT) (Reg . 7) ELSE (Stat . OUTPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -67) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . LOAD) (Reg . 3) (Expr . NOT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -59) (Stat . IF) (Expr . EQ) (Reg . 5) (Expr Num . 81) (Stat . LOAD) (Reg . 12) (Reg . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 9) (Stat . IF) (Expr . MUL) (Expr . DIV) (Reg . 6) (Reg . 2) (Expr Num . 17) (Stat . OUTPUT) (Expr . LT) (Expr Num . 3) (Expr . MUL) (Reg . 4) (Reg . 12) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Expr . DIV) (Expr . GT) (Reg . 1) (Expr Num . -80) (Expr Num . -2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 5) (Stat . IF) (Expr . NOT) (Reg . 14) (Stat . INPUT) (Reg . 0) ELSE (Stat . IF) (Reg . 0) (Stat . IF) (Expr Num . 79) (Stat . INPUT) (Reg . 9) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -62) (Stat . INPUT) (Reg . 1) ELSE (Stat . INPUT) (Reg . 0) END (Stat . IF) (Reg . 5) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 9) (Reg . 8) END ELSE (Stat . IF) (Expr Num . -79) (Stat . INPUT) (Reg . 11) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 39) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr Num . 6) (Reg . 11) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr Num . -77) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -96) (Stat . OUTPUT) (Reg . 7) ELSE (Stat . LOAD) (Reg . 0) (Expr Num . -79) END (Stat . OUTPUT) (Expr Num . 46) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Reg . 1) (Expr Num . 72) (Stat . IF) (Expr Num . 44) (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Reg . 14) (Reg . 7) (Stat . OUTPUT) (Reg . 4) ELSE (Stat . OUTPUT) (Expr Num . -73) END (Stat . LOAD) (Reg . 14) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . GT) (Expr Num . 69) (Reg . 5) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . LOAD) (Reg . 1) (Expr . MUL) (Expr . AND) (Expr Num . -2) (Expr Num . -96) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . LOAD) (Reg . 5) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 10) ELSE (Stat . IF) (Expr Num . 32) (Stat . INPUT) (Reg . 12) END END (Stat . LOAD) (Reg . 10) (Expr Num . 29) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 11) (Stat . LOAD) (Reg . 6) (Expr Num . -52) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr . AND) (Reg . 5) (Expr Num . -30) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . IF) (Expr . OR) (Expr Num . -22) (Expr Num . -14) (Stat . INPUT) (Reg . 4) END ELSE (Stat . IF) (Expr Num . 35) (Stat . OUTPUT) (Expr Num . 19) END END (Stat . OUTPUT) (Expr Num . 71) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . IF) (Expr Num . 17) (Stat . OUTPUT) (Reg . 5) ELSE (Stat . IF) (Expr Num . -5) (Stat . INPUT) (Reg . 1) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 9) (Reg . 14) ELSE (Stat . IF) (Expr Num . 2) (Stat . INPUT) (Reg . 13) ELSE (Stat . LOAD) (Reg . 11) (Expr Num . 49) END END (Stat . IF) (Expr . GT) (Expr Num . -11) (Expr Num . -85) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . LOAD) (Reg . 1) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Expr Num . -49) (Reg . 13) (Stat . LOAD) (Reg . 2) (Reg . 14) ELSE (Stat . LOAD) (Reg . 7) (Expr . SUB) (Reg . 3) (Expr Num . 37) END (Stat . OUTPUT) (Expr Num . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 14) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr Num . 48) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Expr Num . 82) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 14) (Expr . NOT) (Expr Num . -8) END (Stat . IF) (Expr . GT) (Expr Num . 32) (Expr Num . 20) (Stat . LOAD) (Reg . 3) (Expr . MUL) (Expr Num . 34) (Expr Num . 71) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . -84) (Stat . LOAD) (Reg . 13) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Reg . 7) END (Stat . LOAD) (Reg . 4) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Reg . 5) (Stat . OUTPUT) (Expr Num . -64) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 29) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr . AND) (Reg . 3) (Reg . 1) (Expr Num . 76) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr . GT) (Reg . 14) (Expr Num . -37) END (Stat . IF) (Expr Num . 3) (Stat . OUTPUT) (Expr Num . -70) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Reg . 12) (Stat . IF) (Expr . NOT) (Reg . 1) (Stat . OUTPUT) (Expr . EQ) (Reg . 9) (Reg . 12) ELSE (Stat . OUTPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Reg . 0) (Stat . OUTPUT) (Expr Num . -60) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . LT) (Reg . 10) (Reg . 9) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr . EQ) (Expr Num . -89) (Expr Num . 81) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr . ADD) (Expr Num . 77) (Reg . 5) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr . MUL) (Expr Num . -30) (Reg . 12) (Stat . LOAD) (Reg . 11) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr Num . -66) (Reg . 11) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 14) (Stat . IF) (Expr . MUL) (Expr Num . 24) (Reg . 5) (Stat . LOAD) (Reg . 12) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr Num . 3) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 5) (Stat . IF) (Expr Num . -22) (Stat . OUTPUT) (Expr Num . -83) ELSE (Stat . OUTPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . -83) (Stat . OUTPUT) (Expr Num . -23) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -12) (Stat . INPUT) (Reg . 10) ELSE (Stat . LOAD) (Reg . 9) (Expr Num . 38) END (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 13) (Stat . OUTPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 44) (Stat . LOAD) (Reg . 3) (Expr Num . 97) ELSE (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 6) (Reg . 0) END END (Stat . LOAD) (Reg . 3) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -46) (Stat . INPUT) (Reg . 8) ELSE (Stat . OUTPUT) (Expr . OR) (Reg . 0) (Expr Num . 27) END (Stat . IF) (Expr . LT) (Expr Num . -28) (Reg . 11) (Stat . IF) (Expr . AND) (Expr Num . 79) (Reg . 7) (Stat . INPUT) (Reg . 4) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . INPUT) (Reg . 8) END (Stat . LOAD) (Reg . 0) (Expr Num . 36) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -100) (Stat . LOAD) (Reg . 0) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Reg . 13) END (Stat . OUTPUT) (Expr Num . -94) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 33) (Stat . OUTPUT) (Reg . 1) ELSE (Stat . OUTPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Expr Num . 87) (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 2) (Expr Num . 15) ELSE (Stat . LOAD) (Reg . 10) (Expr Num . 26) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . LOAD) (Reg . 2) (Expr Num . -8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . DIV) (Expr Num . 61) (Reg . 9) (Stat . OUTPUT) (Expr Num . 22) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 2) (Expr Num . 63) END (Stat . OUTPUT) (Expr Num . 48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 10) ELSE (Stat . IF) (Expr Num . -39) (Stat . INPUT) (Reg . 9) END END (Stat . IF) (Expr Num . 35) (Stat . OUTPUT) (Expr Num . 15) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr Num . -67) (Stat . LOAD) (Reg . 9) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 7) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . NOT) (Expr Num . 75) (Stat . LOAD) (Reg . 2) (Expr Num . -1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . -8) (Stat . LOAD) (Reg . 4) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . NOT) (Reg . 13) (Stat . IF) (Expr . EQ) (Reg . 1) (Expr . LT) (Expr . MUL) (Reg . 7) (Expr . NOT) (Expr Num . 32) (Expr Num . 97) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . ADD) (Reg . 11) (Expr Num . 80) (Stat . IF) (Expr Num . 73) (Stat . LOAD) (Reg . 2) (Expr . GT) (Expr Num . -52) (Expr . DIV) (Reg . 1) (Expr Num . -3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Expr . SUB) (Reg . 11) (Expr Num . -75) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -82) (Stat . IF) (Expr Num . 48) (Stat . LOAD) (Reg . 1) (Reg . 13) ELSE (Stat . LOAD) (Reg . 6) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Expr . ADD) (Expr Num . -42) (Expr Num . 2) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr Num . 93) (Stat . LOAD) (Reg . 11) (Expr . MUL) (Expr . ADD) (Expr Num . -80) (Reg . 14) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . IF) (Expr Num . 3) (Stat . IF) (Expr Num . -99) (Stat . INPUT) (Reg . 14) ELSE (Stat . IF) (Reg . 11) (Stat . IF) (Expr . NOT) (Expr Num . 24) (Stat . INPUT) (Reg . 13) END ELSE (Stat . LOAD) (Reg . 12) (Expr . NOT) (Reg . 13) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -85) (Stat . IF) (Expr Num . 48) (Stat . OUTPUT) (Expr Num . 97) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . GT) (Reg . 14) (Expr Num . -18) (Stat . OUTPUT) (Expr Num . 72) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 8) (Expr . MUL) (Reg . 10) (Expr Num . 21) END (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . INPUT) (Reg . 3) ELSE (Stat . IF) (Expr . LT) (Reg . 9) (Expr Num . 54) (Stat . INPUT) (Reg . 11) END END (Stat . LOAD) (Reg . 11) (Expr Num . 67) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 11) (Stat . IF) (Expr Num . 73) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 12) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Expr Num . -72) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Expr Num . -52) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Expr Num . 57) ELSE (Stat . OUTPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Expr . DIV) (Expr Num . -72) (Expr Num . 53) (Stat . OUTPUT) (Expr Num . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Reg . 7) (Stat . IF) (Expr . MUL) (Reg . 6) (Expr Num . 80) (Stat . IF) (Expr . MUL) (Reg . 14) (Reg . 2) (Stat . INPUT) (Reg . 0) ELSE (Stat . OUTPUT) (Reg . 10) END ELSE (Stat . LOAD) (Reg . 2) (Expr Num . -6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . IF) (Reg . 3) (Stat . IF) (Expr . SUB) (Expr Num . -30) (Expr Num . -3) (Stat . OUTPUT) (Expr Num . 91) ELSE (Stat . LOAD) (Reg . 11) (Expr . NOT) (Reg . 3) END ELSE (Stat . IF) (Expr . LT) (Expr . ADD) (Reg . 13) (Reg . 3) (Expr . LT) (Expr Num . 56) (Expr Num . -24) (Stat . IF) (Reg . 8) (Stat . IF) (Expr . MUL) (Expr Num . 15) (Reg . 4) (Stat . LOAD) (Reg . 12) (Expr Num . -51) END ELSE (Stat . LOAD) (Reg . 11) (Reg . 5) END END END ELSE (Stat . OUTPUT) (Reg . 12) END (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr . NOT) (Expr . LT) (Reg . 7) (Expr . DIV) (Expr Num . 62) (Expr Num . 78) (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 5) ELSE (Stat . LOAD) (Reg . 7) (Expr Num . -48) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -72) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 3) (Expr Num . 87) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Expr Num . -49) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . SUB) (Reg . 12) (Expr . NOT) (Reg . 1) (Stat . INPUT) (Reg . 5) END (Stat . LOAD) (Reg . 10) (Expr Num . -48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 72) (Stat . IF) (Expr Num . 65) (Stat . OUTPUT) (Expr Num . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 8) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 7) (Reg . 2) ELSE (Stat . INPUT) (Reg . 12) END (Stat . LOAD) (Reg . 0) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . IF) (Expr Num . -31) (Stat . IF) (Expr Num . -33) (Stat . OUTPUT) (Expr . NOT) (Reg . 1) END ELSE (Stat . IF) (Reg . 13) (Stat . LOAD) (Reg . 4) (Reg . 6) END END END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . AND) (Reg . 6) (Expr . NOT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . IF) (Expr Num . -56) (Stat . IF) (Expr Num . 99) (Stat . LOAD) (Reg . 0) (Reg . 13) END ELSE (Stat . IF) (Expr Num . 60) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 5) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 14) (Expr Num . -58) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 1) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 87) (Stat . IF) (Reg . 13) (Stat . IF) (Expr Num . 25) (Stat . IF) (Reg . 11) (Stat . INPUT) (Reg . 5) END END ELSE (Stat . IF) (Expr Num . -39) (Stat . INPUT) (Reg . 1) END END END (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . INPUT) (Reg . 12) ELSE (Stat . INPUT) (Reg . 9) END (Stat . LOAD) (Reg . 5) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 7) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Reg . 4) (Expr Num . -43) (Stat . LOAD) (Reg . 10) (Expr Num . -17) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . LOAD) (Reg . 7) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Expr Num . 30) (Expr Num . 52) (Stat . OUTPUT) (Reg . 6) END (Stat . IF) (Reg . 11) (Stat . IF) (Expr Num . -81) (Stat . LOAD) (Reg . 6) (Reg . 9) ELSE (Stat . OUTPUT) (Reg . 0) END ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . GT) (Expr Num . 91) (Expr Num . -36) (Stat . LOAD) (Reg . 2) (Reg . 10) ELSE (Stat . INPUT) (Reg . 9) END (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . GT) (Expr Num . -74) (Expr Num . 65) (Stat . INPUT) (Reg . 10) ELSE (Stat . LOAD) (Reg . 4) (Expr . OR) (Reg . 8) (Reg . 10) END (Stat . LOAD) (Reg . 8) (Expr Num . 42) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr . MUL) (Expr Num . 24) (Reg . 8) (Stat . IF) (Expr Num . 63) (Stat . OUTPUT) (Expr Num . -68) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Reg . 10) (Stat . IF) (Expr Num . -32) (Stat . OUTPUT) (Expr Num . 12) ELSE (Stat . IF) (Expr Num . -49) (Stat . OUTPUT) (Reg . 12) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . IF) (Expr Num . -31) (Stat . OUTPUT) (Expr Num . -58) ELSE (Stat . OUTPUT) (Expr Num . -5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 14) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 10) (Stat . OUTPUT) (Expr Num . -15) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 11) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 10) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . IF) (Expr Num . -70) (Stat . IF) (Reg . 8) (Stat . INPUT) (Reg . 8) ELSE (Stat . INPUT) (Reg . 13) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 7) (Stat . IF) (Expr Num . -48) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . 14) (Stat . IF) (Expr Num . 61) (Stat . OUTPUT) (Expr Num . -32) ELSE (Stat . OUTPUT) (Expr Num . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 80) (Stat . IF) (Expr Num . -53) (Stat . OUTPUT) (Expr Num . 86) ELSE (Stat . INPUT) (Reg . 7) END ELSE (Stat . LOAD) (Reg . 5) (Expr . NOT) (Expr Num . 74) END (Stat . LOAD) (Reg . 11) (Expr Num . 38) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . IF) (Expr Num . 15) (Stat . LOAD) (Reg . 13) (Reg . 14) END END (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 11) (Expr Num . 57) ELSE (Stat . IF) (Expr Num . 34) (Stat . LOAD) (Reg . 3) (Reg . 2) END END (Stat . IF) (Expr Num . 19) (Stat . LOAD) (Reg . 4) (Expr Num . -92) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 94) (Stat . LOAD) (Reg . 2) (Reg . 3) ELSE (Stat . OUTPUT) (Reg . 7) END (Stat . LOAD) (Reg . 12) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 65) (Stat . LOAD) (Reg . 8) (Expr Num . 51) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 32) (Stat . INPUT) (Reg . 10) END (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 10) (Stat . LOAD) (Reg . 9) (Expr Num . 28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Expr . SUB) (Expr . ADD) (Reg . 5) (Expr Num . -32) (Expr Num . 51) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . -76) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 12) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Reg . 12) (Expr Num . -68) (Stat . IF) (Expr . NOT) (Expr Num . -49) (Stat . LOAD) (Reg . 8) (Reg . 9) ELSE (Stat . INPUT) (Reg . 7) END END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 71) (Stat . OUTPUT) (Expr . LT) (Expr Num . -84) (Expr Num . -100) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . -70) (Stat . LOAD) (Reg . 14) (Expr Num . -19) END ELSE (Stat . IF) (Expr Num . -57) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 14) (Expr . MUL) (Reg . 13) (Reg . 7) ELSE (Stat . OUTPUT) (Reg . 7) END ELSE (Stat . INPUT) (Reg . 9) END END (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr Num . -50) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . OUTPUT) (Expr Num . -86) END (Stat . LOAD) (Reg . 7) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -14) (Stat . INPUT) (Reg . 2) END (Stat . IF) (Expr Num . 73) (Stat . OUTPUT) (Expr Num . -39) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 8) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . LOAD) (Reg . 3) (Expr Num . -79) END (Stat . OUTPUT) (Expr . SUB) (Reg . 8) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 6) (Stat . IF) (Expr Num . 78) (Stat . OUTPUT) (Expr Num . -12) ELSE (Stat . OUTPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr . MUL) (Reg . 8) (Expr Num . 23) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -59) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . IF) (Reg . 9) (Stat . IF) (Reg . 6) (Stat . IF) (Expr Num . -57) (Stat . LOAD) (Reg . 4) (Expr Num . -62) END END ELSE (Stat . IF) (Expr Num . -35) (Stat . LOAD) (Reg . 7) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . 13) (Stat . OUTPUT) (Expr Num . 25) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr . LT) (Reg . 0) (Expr Num . -50) (Expr Num . 45) (Stat . IF) (Reg . 10) (Stat . OUTPUT) (Expr Num . 97) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Expr Num . -5) ELSE (Stat . OUTPUT) (Reg . 8) END END (Stat . LOAD) (Reg . 0) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 4) (Reg . 0) ELSE (Stat . IF) (Expr Num . 43) (Stat . IF) (Expr Num . 39) (Stat . INPUT) (Reg . 1) END ELSE (Stat . IF) (Reg . 8) (Stat . IF) (Reg . 0) (Stat . INPUT) (Reg . 8) END ELSE (Stat . LOAD) (Reg . 10) (Expr Num . 74) END END END END (Stat . LOAD) (Reg . 2) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 32) (Stat . LOAD) (Reg . 8) (Expr Num . -61) END (Stat . LOAD) (Reg . 11) (Expr Num . 62) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 9) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Expr Num . 31) (Reg . 5) (Stat . INPUT) (Reg . 14) ELSE (Stat . INPUT) (Reg . 3) END (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -29) (Stat . OUTPUT) (Expr Num . -93) END (Stat . IF) (Expr Num . 26) (Stat . INPUT) (Reg . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 5) (Stat . IF) (Expr Num . 81) (Stat . IF) (Reg . 12) (Stat . IF) (Expr . SUB) (Reg . 8) (Reg . 7) (Stat . OUTPUT) (Expr Num . 74) END END ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr . SUB) (Reg . 12) (Expr . AND) (Expr . DIV) (Expr Num . 87) (Reg . 12) (Expr Num . -88) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr Num . 17) (Expr Num . -5) (Stat . IF) (Expr Num . 0) (Stat . OUTPUT) (Expr Num . -55) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 31) (Stat . OUTPUT) (Reg . 5) END (Stat . OUTPUT) (Expr Num . -94) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . 88) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Expr Num . -74) (Stat . IF) (Expr . EQ) (Reg . 7) (Expr Num . 15) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Expr Num . 5) (Stat . LOAD) (Reg . 13) (Expr Num . 85) END END ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 10) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . LOAD) (Reg . 1) (Expr . OR) (Expr Num . 81) (Expr Num . -12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . IF) (Reg . 9) (Stat . OUTPUT) (Expr Num . -16) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -67) (Stat . LOAD) (Reg . 6) (Reg . 1) ELSE (Stat . IF) (Expr Num . -65) (Stat . LOAD) (Reg . 4) (Reg . 5) ELSE (Stat . INPUT) (Reg . 11) END END (Stat . IF) (Reg . 9) (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . IF) (Expr Num . 16) (Stat . LOAD) (Reg . 13) (Reg . 9) ELSE (Stat . OUTPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 6) (Expr Num . -38) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . IF) (Expr . DIV) (Expr Num . 90) (Expr . MUL) (Expr . NOT) (Reg . 10) (Reg . 14) (Stat . INPUT) (Reg . 7) ELSE (Stat . INPUT) (Reg . 11) END ELSE (Stat . INPUT) (Reg . 4) END (Stat . IF) (Expr Num . -50) (Stat . IF) (Expr . LT) (Expr Num . 22) (Expr Num . -2) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 4) (Expr . MUL) (Reg . 4) (Expr Num . 33) END ELSE (Stat . IF) (Reg . 10) (Stat . INPUT) (Reg . 10) ELSE (Stat . IF) (Reg . 9) (Stat . IF) (Expr Num . -55) (Stat . LOAD) (Reg . 4) (Expr . AND) (Reg . 3) (Expr Num . 46) ELSE (Stat . INPUT) (Reg . 12) END END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 15) (Stat . LOAD) (Reg . 4) (Reg . 6) ELSE (Stat . INPUT) (Reg . 13) END (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . 61) (Stat . OUTPUT) (Expr Num . -73) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 5) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 8) (Stat . LOAD) (Reg . 11) (Expr Num . 98) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 8) (Expr . OR) (Reg . 11) (Reg . 10) END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . -34) (Stat . LOAD) (Reg . 4) (Expr Num . -85) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . IF) (Expr Num . -10) (Stat . OUTPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr . OR) (Expr Num . 55) (Expr . MUL) (Reg . 4) (Expr Num . -18) (Expr Num . -94) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 1) (Stat . OUTPUT) (Expr Num . -18) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Expr Num . -45) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . IF) (Expr Num . 1) (Stat . OUTPUT) (Expr . GT) (Expr . GT) (Expr Num . 49) (Expr Num . 22) (Reg . 10) ELSE (Stat . LOAD) (Reg . 4) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -10) (Stat . LOAD) (Reg . 1) (Expr Num . 18) ELSE (Stat . INPUT) (Reg . 9) END (Stat . IF) (Expr Num . 56) (Stat . LOAD) (Reg . 11) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -79) (Stat . IF) (Expr Num . -88) (Stat . INPUT) (Reg . 11) ELSE (Stat . INPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Expr Num . -30) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 93) (Stat . OUTPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 43) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . 46) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Expr . NOT) (Expr . EQ) (Reg . 1) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . IF) (Expr Num . -12) (Stat . INPUT) (Reg . 5) ELSE (Stat . LOAD) (Reg . 1) (Expr Num . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 3) (Expr Num . 59) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr . AND) (Reg . 3) (Reg . 7) (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 6) ELSE (Stat . IF) (Reg . 11) (Stat . IF) (Expr . DIV) (Reg . 2) (Reg . 12) (Stat . LOAD) (Reg . 2) (Expr Num . -64) END ELSE (Stat . LOAD) (Reg . 14) (Expr Num . -80) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 1) (Stat . LOAD) (Reg . 7) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Expr Num . 74) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . LOAD) (Reg . 8) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . IF) (Reg . 11) (Stat . OUTPUT) (Expr Num . -78) ELSE (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -18) (Stat . IF) (Reg . 3) (Stat . IF) (Reg . 10) (Stat . IF) (Expr . GT) (Expr Num . -5) (Expr Num . -30) (Stat . LOAD) (Reg . 11) (Reg . 11) END ELSE (Stat . LOAD) (Reg . 5) (Reg . 13) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 1) (Stat . IF) (Expr Num . 62) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 1) (Stat . LOAD) (Reg . 7) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 9) (Stat . IF) (Expr Num . 59) (Stat . OUTPUT) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr . ADD) (Reg . 7) (Reg . 7) (Stat . OUTPUT) (Expr Num . -43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 7) (Stat . INPUT) (Reg . 2) ELSE (Stat . OUTPUT) (Reg . 8) END (Stat . LOAD) (Reg . 9) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 8) (Expr Num . -2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 0) (Expr Num . 60) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Reg . 12) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . 37) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . LOAD) (Reg . 2) (Reg . 7) END (Stat . LOAD) (Reg . 7) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 13) (Stat . LOAD) (Reg . 4) (Expr . MUL) (Reg . 5) (Expr Num . 40) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . IF) (Expr Num . 46) (Stat . LOAD) (Reg . 14) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 7) (Expr Num . -9) ELSE (Stat . INPUT) (Reg . 12) END (Stat . IF) (Expr . NOT) (Reg . 5) (Stat . IF) (Reg . 11) (Stat . IF) (Reg . 0) (Stat . INPUT) (Reg . 6) END END ELSE (Stat . LOAD) (Reg . 3) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . SUB) (Reg . 1) (Reg . 8) (Stat . INPUT) (Reg . 12) END (Stat . LOAD) (Reg . 11) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 2) (Stat . LOAD) (Reg . 8) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Reg . 13) (Stat . IF) (Expr . MUL) (Expr Num . 37) (Reg . 13) (Stat . IF) (Expr Num . -86) (Stat . INPUT) (Reg . 9) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . IF) (Expr . AND) (Expr Num . 18) (Expr . NOT) (Expr Num . -39) (Stat . LOAD) (Reg . 12) (Expr Num . 61) ELSE (Stat . IF) (Expr Num . -92) (Stat . LOAD) (Reg . 11) (Expr Num . 44) ELSE (Stat . LOAD) (Reg . 9) (Reg . 9) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . -60) (Stat . OUTPUT) (Expr Num . 22) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -26) (Stat . INPUT) (Reg . 0) END (Stat . LOAD) (Reg . 3) (Expr Num . -48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 13) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Expr Num . 59) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Expr Num . 4) (Stat . LOAD) (Reg . 12) (Reg . 7) END ELSE (Stat . INPUT) (Reg . 7) END (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 14) (Expr Num . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . SUB) (Reg . 10) (Expr Num . -43) (Stat . OUTPUT) (Expr Num . 51) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Expr Num . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . INPUT) (Reg . 11) END (Stat . IF) (Reg . 12) (Stat . IF) (Expr . LT) (Expr Num . 80) (Reg . 3) (Stat . IF) (Expr Num . -100) (Stat . OUTPUT) (Expr Num . 92) END END ELSE (Stat . LOAD) (Reg . 6) (Expr Num . -67) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Reg . 14) (Stat . IF) (Expr Num . 87) (Stat . INPUT) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -62) (Stat . INPUT) (Reg . 12) END (Stat . IF) (Reg . 5) (Stat . INPUT) (Reg . 11) ELSE (Stat . IF) (Reg . 8) (Stat . IF) (Reg . 9) (Stat . IF) (Expr . NOT) (Expr Num . 90) (Stat . INPUT) (Reg . 5) END END ELSE (Stat . IF) (Expr . SUB) (Expr Num . -43) (Reg . 9) (Stat . INPUT) (Reg . 13) ELSE (Stat . INPUT) (Reg . 5) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 9) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr Num . -64) (Stat . IF) (Expr Num . -7) (Stat . OUTPUT) (Expr Num . -85) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . IF) (Expr . LT) (Expr Num . 60) (Reg . 12) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 2) (Stat . OUTPUT) (Expr Num . 28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 7) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 3) (Stat . LOAD) (Reg . 4) (Expr Num . 57) ELSE (Stat . OUTPUT) (Expr . AND) (Expr . SUB) (Expr . GT) (Reg . 1) (Expr Num . 62) (Expr Num . -77) (Reg . 10) END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 12) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 58) (Stat . LOAD) (Reg . 6) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Reg . 13) (Expr . ADD) (Reg . 2) (Expr Num . -81) (Stat . LOAD) (Reg . 8) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr Num . 21) (Stat . LOAD) (Reg . 8) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 6) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 28) (Stat . OUTPUT) (Expr Num . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . 19) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 24) (Stat . IF) (Reg . 4) (Stat . LOAD) (Reg . 9) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . LOAD) (Reg . 3) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . OUTPUT) (Expr . ADD) (Expr Num . 73) (Reg . 13) END (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . IF) (Expr Num . -21) (Stat . OUTPUT) (Expr . SUB) (Expr Num . -84) (Reg . 10) ELSE (Stat . OUTPUT) (Reg . 10) END END (Stat . LOAD) (Reg . 7) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Expr Num . 65) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 91) (Stat . INPUT) (Reg . 13) ELSE (Stat . LOAD) (Reg . 7) (Expr Num . -97) END (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 5) (Stat . IF) (Expr Num . 9) (Stat . INPUT) (Reg . 6) ELSE (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Expr Num . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . ADD) (Expr Num . 37) (Reg . 5) (Stat . OUTPUT) (Expr Num . 37) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 35) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . 45) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . AND) (Reg . 6) (Expr . GT) (Expr Num . -80) (Expr Num . 43) (Stat . LOAD) (Reg . 5) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 10) (Stat . LOAD) (Reg . 12) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . -60) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 14) (Stat . IF) (Expr Num . 2) (Stat . OUTPUT) (Expr Num . -83) ELSE (Stat . LOAD) (Reg . 3) (Expr . MUL) (Reg . 6) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . SUB) (Expr Num . -10) (Expr Num . -51) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -43) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . IF) (Expr Num . 22) (Stat . INPUT) (Reg . 6) ELSE (Stat . IF) (Expr Num . -60) (Stat . INPUT) (Reg . 9) ELSE (Stat . OUTPUT) (Reg . 14) END END END (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . 10) (Stat . OUTPUT) (Reg . 9) ELSE (Stat . INPUT) (Reg . 5) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 9) (Expr Num . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -67) (Stat . OUTPUT) (Reg . 2) ELSE (Stat . INPUT) (Reg . 0) END (Stat . LOAD) (Reg . 9) (Expr Num . -28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 32) (Stat . LOAD) (Reg . 3) (Expr Num . 86) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 7) (Stat . IF) (Expr . NOT) (Reg . 7) (Stat . IF) (Expr Num . -99) (Stat . IF) (Expr Num . 0) (Stat . LOAD) (Reg . 14) (Expr Num . -69) END ELSE (Stat . INPUT) (Reg . 8) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 53) (Stat . IF) (Expr Num . -64) (Stat . IF) (Expr Num . 21) (Stat . LOAD) (Reg . 5) (Expr Num . 36) ELSE (Stat . LOAD) (Reg . 8) (Expr . NOT) (Reg . 12) END ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 36) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr Num . 40) (Reg . 10) (Stat . LOAD) (Reg . 5) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 5) END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Expr . EQ) (Expr Num . -53) (Reg . 13) (Stat . LOAD) (Reg . 0) (Reg . 14) ELSE (Stat . LOAD) (Reg . 8) (Expr Num . -68) END ELSE (Stat . INPUT) (Reg . 6) END (Stat . LOAD) (Reg . 1) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . 54) (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 1) (Expr Num . 61) ELSE (Stat . LOAD) (Reg . 8) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . -100) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Expr Num . -36) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -11) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . 13) (Stat . LOAD) (Reg . 5) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 4) (Stat . OUTPUT) (Expr Num . 71) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Expr Num . -81) (Stat . INPUT) (Reg . 2) ELSE (Stat . OUTPUT) (Expr Num . -35) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . -43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . LOAD) (Reg . 7) (Reg . 7) ELSE (Stat . LOAD) (Reg . 6) (Expr Num . 55) END (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 13) END (Stat . OUTPUT) (Expr Num . 47) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Expr Num . -2) (Stat . INPUT) (Reg . 13) ELSE (Stat . LOAD) (Reg . 14) (Expr . EQ) (Expr . GT) (Reg . 6) (Expr . DIV) (Reg . 7) (Expr Num . 26) (Expr Num . 71) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 5) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 87) (Stat . OUTPUT) (Expr Num . 59) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 7) (Stat . IF) (Expr . MUL) (Expr . GT) (Expr Num . -62) (Reg . 14) (Reg . 11) (Stat . LOAD) (Reg . 11) (Reg . 10) ELSE (Stat . OUTPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 28) (Stat . INPUT) (Reg . 8) END (Stat . LOAD) (Reg . 6) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . 77) (Stat . IF) (Expr . GT) (Reg . 12) (Expr Num . -42) (Stat . OUTPUT) (Expr Num . 76) ELSE (Stat . OUTPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 20) (Stat . IF) (Expr . EQ) (Expr Num . -2) (Expr Num . -64) (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 33) (Stat . LOAD) (Reg . 5) (Reg . 2) ELSE (Stat . IF) (Expr . EQ) (Expr . OR) (Expr Num . 27) (Reg . 1) (Expr Num . 50) (Stat . OUTPUT) (Expr Num . 99) ELSE (Stat . IF) (Expr Num . -6) (Stat . INPUT) (Reg . 2) END END END (Stat . OUTPUT) (Expr . LT) (Expr Num . -85) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 9) (Stat . OUTPUT) (Expr Num . 83) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . SUB) (Expr Num . 8) (Expr Num . 24) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Reg . 14) ELSE (Stat . OUTPUT) (Reg . 12) END END (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Expr . DIV) (Reg . 13) (Expr . LT) (Expr . EQ) (Expr Num . -74) (Reg . 3) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr . NOT) (Reg . 4) (Stat . LOAD) (Reg . 13) (Expr Num . -77) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . LOAD) (Reg . 8) (Expr Num . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -21) (Stat . LOAD) (Reg . 6) (Expr Num . 28) ELSE (Stat . INPUT) (Reg . 11) END (Stat . LOAD) (Reg . 3) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 46) (Stat . IF) (Expr . NOT) (Expr Num . 30) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 2) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Reg . 11) END ELSE (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Expr Num . 60) END END (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . LOAD) (Reg . 10) (Expr Num . 12) ELSE (Stat . OUTPUT) (Expr . GT) (Reg . 8) (Expr Num . -94) END (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -27) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Expr Num . 9) (Stat . IF) (Expr Num . -14) (Stat . LOAD) (Reg . 8) (Reg . 2) ELSE (Stat . LOAD) (Reg . 10) (Reg . 2) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -4) (Stat . LOAD) (Reg . 2) (Expr Num . 99) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . SUB) (Expr . DIV) (Expr Num . 6) (Expr Num . -91) (Reg . 14) (Stat . IF) (Reg . 4) (Stat . LOAD) (Reg . 3) (Expr . ADD) (Expr Num . -55) (Reg . 7) ELSE (Stat . OUTPUT) (Expr Num . 38) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -99) (Stat . IF) (Expr . LT) (Expr Num . 48) (Reg . 14) (Stat . IF) (Expr Num . -7) (Stat . IF) (Expr Num . 82) (Stat . INPUT) (Reg . 10) ELSE (Stat . INPUT) (Reg . 3) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 27) (Stat . OUTPUT) (Expr Num . -78) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr . OR) (Expr . GT) (Reg . 7) (Expr Num . 11) (Reg . 11) (Stat . IF) (Expr Num . -35) (Stat . INPUT) (Reg . 2) ELSE (Stat . OUTPUT) (Expr Num . 47) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . IF) (Expr . NOT) (Expr Num . 85) (Stat . OUTPUT) (Expr . AND) (Reg . 7) (Expr . NOT) (Expr Num . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 31) (Stat . LOAD) (Reg . 0) (Expr Num . -50) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 5) (Expr Num . -90) END (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Expr . ADD) (Expr . AND) (Expr Num . 59) (Expr Num . -41) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 4) (Stat . IF) (Reg . 8) (Stat . OUTPUT) (Expr . AND) (Reg . 5) (Reg . 13) ELSE (Stat . OUTPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Reg . 6) (Stat . IF) (Expr Num . 41) (Stat . LOAD) (Reg . 12) (Expr Num . 63) END ELSE (Stat . LOAD) (Reg . 0) (Expr . EQ) (Reg . 14) (Expr Num . -17) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . OUTPUT) (Expr Num . 90) ELSE (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 4) (Expr Num . 52) ELSE (Stat . IF) (Expr . GT) (Expr Num . 43) (Expr . DIV) (Reg . 8) (Reg . 4) (Stat . OUTPUT) (Expr Num . 58) END END END (Stat . LOAD) (Reg . 0) (Expr Num . -44) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . LT) (Expr Num . -78) (Reg . 5) (Stat . LOAD) (Reg . 12) (Expr Num . -93) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . -52) (Stat . OUTPUT) (Expr Num . -64) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr . LT) (Expr Num . -38) (Expr Num . 25) ELSE (Stat . INPUT) (Reg . 4) END (Stat . OUTPUT) (Expr Num . 32) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . IF) (Expr Num . 37) (Stat . LOAD) (Reg . 13) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 3) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -34) (Stat . INPUT) (Reg . 14) ELSE (Stat . LOAD) (Reg . 1) (Expr Num . -14) END (Stat . IF) (Reg . 6) (Stat . OUTPUT) (Expr Num . 25) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . OUTPUT) (Expr Num . 16) ELSE (Stat . INPUT) (Reg . 0) END (Stat . IF) (Expr . SUB) (Expr Num . 52) (Reg . 0) (Stat . OUTPUT) (Expr . ADD) (Expr Num . -39) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 13) ELSE (Stat . LOAD) (Reg . 11) (Expr Num . -50) END (Stat . LOAD) (Reg . 14) (Expr Num . -2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . INPUT) (Reg . 10) ELSE (Stat . LOAD) (Reg . 14) (Expr Num . -81) END (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . DIV) (Expr Num . 25) (Reg . 9) (Stat . INPUT) (Reg . 8) END (Stat . IF) (Expr Num . 51) (Stat . OUTPUT) (Expr . AND) (Expr Num . 52) (Expr Num . 91) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 1) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . IF) (Expr . LT) (Reg . 14) (Reg . 13) (Stat . LOAD) (Reg . 4) (Expr Num . 21) ELSE (Stat . OUTPUT) (Reg . 5) END END (Stat . OUTPUT) (Expr . EQ) (Reg . 8) (Expr . LT) (Expr . SUB) (Reg . 14) (Expr Num . 23) (Expr Num . 81) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 11) END (Stat . LOAD) (Reg . 14) (Expr . NOT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . IF) (Expr Num . -71) (Stat . LOAD) (Reg . 0) (Reg . 7) ELSE (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 70) (Stat . LOAD) (Reg . 11) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 59) (Stat . OUTPUT) (Expr Num . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Reg . 5) (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -12) (Stat . INPUT) (Reg . 12) ELSE (Stat . OUTPUT) (Expr . NOT) (Reg . 13) END (Stat . OUTPUT) (Expr . NOT) (Expr . AND) (Expr . ADD) (Expr Num . 39) (Expr Num . -55) (Expr Num . -93) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Reg . 1) ELSE (Stat . IF) (Expr . GT) (Expr . EQ) (Reg . 6) (Expr Num . 41) (Reg . 8) (Stat . INPUT) (Reg . 0) ELSE (Stat . INPUT) (Reg . 4) END END (Stat . LOAD) (Reg . 3) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 15) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Expr Num . -12) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 93) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 5) END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . LOAD) (Reg . 14) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 5) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Expr Num . -55) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . AND) (Expr . AND) (Reg . 4) (Expr Num . -75) (Expr . ADD) (Expr . EQ) (Reg . 9) (Reg . 5) (Expr Num . -38) (Stat . IF) (Reg . 6) (Stat . OUTPUT) (Expr . GT) (Reg . 3) (Expr Num . -99) ELSE (Stat . LOAD) (Reg . 11) (Expr Num . -54) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -100) (Stat . OUTPUT) (Expr Num . -95) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 8) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . IF) (Reg . 9) (Stat . INPUT) (Reg . 0) ELSE (Stat . IF) (Expr Num . -77) (Stat . OUTPUT) (Reg . 6) ELSE (Stat . OUTPUT) (Expr Num . -56) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Expr Num . 58) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . 34) (Stat . OUTPUT) (Expr Num . -95) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Expr Num . 53) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -91) (Stat . OUTPUT) (Reg . 7) END (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 6) (Stat . IF) (Expr Num . 43) (Stat . INPUT) (Reg . 9) ELSE (Stat . OUTPUT) (Expr . LT) (Expr . GT) (Reg . 14) (Expr Num . 20) (Expr Num . -86) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -93) (Stat . LOAD) (Reg . 3) (Reg . 11) ELSE (Stat . INPUT) (Reg . 4) END (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 11) (Stat . IF) (Expr . DIV) (Expr Num . 29) (Expr Num . 61) (Stat . OUTPUT) (Reg . 7) ELSE (Stat . LOAD) (Reg . 11) (Expr Num . 77) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr Num . -62) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . LOAD) (Reg . 0) (Expr Num . -33) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 9) ELSE (Stat . IF) (Expr Num . 61) (Stat . INPUT) (Reg . 9) ELSE (Stat . LOAD) (Reg . 9) (Expr Num . 27) END END (Stat . LOAD) (Reg . 4) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Expr . SUB) (Reg . 1) (Reg . 7) (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Reg . 3) END END ELSE (Stat . IF) (Reg . 6) (Stat . INPUT) (Reg . 7) ELSE (Stat . OUTPUT) (Expr Num . -34) END END (Stat . OUTPUT) (Expr Num . 23) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . AND) (Expr Num . -76) (Expr . AND) (Expr . GT) (Expr Num . -15) (Expr . NOT) (Expr Num . 77) (Reg . 0) (Stat . OUTPUT) (Reg . 3) END (Stat . LOAD) (Reg . 14) (Expr Num . -49) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . IF) (Expr . OR) (Expr Num . -86) (Reg . 1) (Stat . LOAD) (Reg . 12) (Reg . 14) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . 93) (Stat . OUTPUT) (Expr Num . 85) ELSE (Stat . LOAD) (Reg . 9) (Expr Num . 84) END ELSE (Stat . OUTPUT) (Expr Num . -62) END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 6) (Stat . LOAD) (Reg . 1) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 10) (Stat . LOAD) (Reg . 5) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . LOAD) (Reg . 2) (Reg . 2) ELSE (Stat . INPUT) (Reg . 4) END (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . 78) ELSE (Stat . LOAD) (Reg . 3) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 87) (Stat . OUTPUT) (Expr . NOT) (Expr Num . -59) END (Stat . OUTPUT) (Expr . DIV) (Expr Num . -6) (Expr Num . 35) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Expr Num . 61) (Expr Num . -19) (Stat . INPUT) (Reg . 14) END (Stat . IF) (Expr . LT) (Reg . 5) (Expr . NOT) (Expr . SUB) (Expr . LT) (Reg . 0) (Expr Num . 1) (Expr Num . -99) (Stat . OUTPUT) (Expr Num . -21) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 2) (Stat . OUTPUT) (Reg . 12) END (Stat . OUTPUT) (Expr Num . 72) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 6) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . GT) (Expr Num . 37) (Reg . 2) (Stat . OUTPUT) (Expr . NOT) (Expr Num . 91) END (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Expr Num . 26) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -24) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . IF) (Expr Num . -58) (Stat . INPUT) (Reg . 12) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -20) (Stat . LOAD) (Reg . 7) (Reg . 9) ELSE (Stat . INPUT) (Reg . 0) END (Stat . IF) (Reg . 3) (Stat . INPUT) (Reg . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . 40) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Expr Num . -23) END END (Stat . LOAD) (Reg . 10) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 0) (Stat . IF) (Expr Num . 4) (Stat . INPUT) (Reg . 6) ELSE (Stat . OUTPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 90) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Reg . 10) ELSE (Stat . LOAD) (Reg . 1) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Expr . ADD) (Expr Num . -81) (Expr Num . 20) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 6) (Stat . LOAD) (Reg . 11) (Expr Num . -79) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . -31) (Stat . IF) (Expr Num . -100) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 6) (Stat . LOAD) (Reg . 13) (Reg . 1) ELSE (Stat . IF) (Reg . 2) (Stat . IF) (Expr Num . 32) (Stat . INPUT) (Reg . 13) END END END (Stat . LOAD) (Reg . 9) (Expr Num . -17) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -31) (Stat . IF) (Reg . 13) (Stat . LOAD) (Reg . 12) (Expr Num . 8) ELSE (Stat . OUTPUT) (Expr . EQ) (Expr . GT) (Expr . EQ) (Expr Num . -34) (Reg . 8) (Reg . 13) (Expr . NOT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 9) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 62) (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 52) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . -5) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . 81) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . IF) (Expr Num . -11) (Stat . LOAD) (Reg . 8) (Expr Num . -13) ELSE (Stat . INPUT) (Reg . 5) END ELSE (Stat . IF) (Expr Num . 7) (Stat . IF) (Expr Num . -87) (Stat . LOAD) (Reg . 11) (Reg . 2) ELSE (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 0) ELSE (Stat . IF) (Expr Num . -79) (Stat . INPUT) (Reg . 14) ELSE (Stat . INPUT) (Reg . 10) END END END ELSE (Stat . LOAD) (Reg . 10) (Expr Num . 32) END END (Stat . LOAD) (Reg . 11) (Expr . NOT) (Expr Num . -89) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . IF) (Expr Num . 50) (Stat . OUTPUT) (Expr Num . 41) END END (Stat . IF) (Reg . 11) (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -73) (Stat . IF) (Expr Num . -89) (Stat . OUTPUT) (Expr Num . 77) ELSE (Stat . IF) (Expr Num . -20) (Stat . IF) (Expr Num . 34) (Stat . LOAD) (Reg . 1) (Reg . 4) END END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 9) END (Stat . IF) (Expr Num . -58) (Stat . INPUT) (Reg . 6) ELSE (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . LOAD) (Reg . 8) (Reg . 14) END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 2) (Stat . LOAD) (Reg . 11) (Reg . 11) END (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 13) (Stat . LOAD) (Reg . 13) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 87) (Stat . INPUT) (Reg . 5) END (Stat . LOAD) (Reg . 7) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -55) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr Num . 15) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Expr Num . 72) ELSE (Stat . OUTPUT) (Expr Num . 68) END (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . IF) (Expr . GT) (Expr Num . 73) (Expr Num . 82) (Stat . OUTPUT) (Expr Num . 45) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 12) ELSE (Stat . OUTPUT) (Expr Num . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -19) (Stat . IF) (Expr Num . -65) (Stat . INPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . LOAD) (Reg . 3) (Expr Num . -77) END (Stat . LOAD) (Reg . 7) (Expr . AND) (Expr Num . -36) (Expr Num . -85) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -14) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -33) (Stat . LOAD) (Reg . 11) (Expr Num . -91) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 5) (Expr . OR) (Reg . 10) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Reg . 10) ELSE (Stat . OUTPUT) (Expr Num . -20) END (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -18) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 84) (Stat . INPUT) (Reg . 9) END (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 1) (Stat . OUTPUT) (Expr . SUB) (Expr Num . 33) (Expr Num . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . IF) (Reg . 3) (Stat . IF) (Expr Num . -20) (Stat . INPUT) (Reg . 8) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 4) (Stat . OUTPUT) (Expr . EQ) (Expr Num . -69) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 14) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -44) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . IF) (Reg . 9) (Stat . OUTPUT) (Expr Num . -20) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . LOAD) (Reg . 13) (Expr Num . 38) ELSE (Stat . OUTPUT) (Reg . 10) END (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 7) (Stat . OUTPUT) (Expr Num . 81) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . ADD) (Reg . 0) (Reg . 5) (Stat . OUTPUT) (Expr . ADD) (Expr Num . -20) (Expr . OR) (Reg . 7) (Expr Num . 30) ELSE (Stat . OUTPUT) (Reg . 2) END (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 13) (Expr . MUL) (Expr Num . 85) (Reg . 11) END END (Stat . IF) (Expr Num . 60) (Stat . IF) (Expr Num . 96) (Stat . INPUT) (Reg . 1) ELSE (Stat . INPUT) (Reg . 7) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . OUTPUT) (Reg . 1) ELSE (Stat . INPUT) (Reg . 11) END (Stat . LOAD) (Reg . 10) (Expr Num . 56) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . -1) (Stat . INPUT) (Reg . 9) ELSE (Stat . IF) (Expr . AND) (Expr Num . 68) (Reg . 10) (Stat . INPUT) (Reg . 0) ELSE (Stat . OUTPUT) (Expr Num . -37) END END END (Stat . LOAD) (Reg . 5) (Expr . OR) (Expr Num . -25) (Expr Num . -91) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 12) (Expr Num . 88) END (Stat . LOAD) (Reg . 3) (Expr Num . -14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . NOT) (Expr Num . 39) (Stat . IF) (Expr Num . -8) (Stat . LOAD) (Reg . 14) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 34) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Expr Num . 95) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . LOAD) (Reg . 7) (Expr Num . 76) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -80) (Stat . INPUT) (Reg . 12) END (Stat . OUTPUT) (Expr Num . -80) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . IF) (Expr Num . -75) (Stat . LOAD) (Reg . 11) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Reg . 3) (Expr . LT) (Reg . 3) (Expr . OR) (Expr Num . -68) (Expr Num . -51) (Stat . OUTPUT) (Expr Num . 78) ELSE (Stat . IF) (Expr . ADD) (Expr . LT) (Reg . 1) (Expr Num . -93) (Expr . DIV) (Expr Num . -69) (Expr Num . -89) (Stat . OUTPUT) (Expr Num . 70) END END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 2) (Stat . IF) (Expr Num . -58) (Stat . LOAD) (Reg . 5) (Reg . 10) ELSE (Stat . OUTPUT) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Expr Num . -92) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr Num . 56) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Expr . AND) (Expr . LT) (Reg . 2) (Expr Num . -44) (Expr Num . -49) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Reg . 12) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr Num . 86) (Stat . LOAD) (Reg . 12) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 13) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . 42) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 72) (Stat . LOAD) (Reg . 7) (Expr Num . -8) ELSE (Stat . IF) (Expr Num . 12) (Stat . OUTPUT) (Expr Num . -14) END END (Stat . OUTPUT) (Expr Num . 30) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 13) (Stat . IF) (Expr . NOT) (Expr Num . 48) (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . IF) (Expr Num . -50) (Stat . LOAD) (Reg . 9) (Expr Num . 80) ELSE (Stat . IF) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 0) (Expr Num . -88) END ELSE (Stat . OUTPUT) (Expr Num . 80) END END ELSE (Stat . INPUT) (Reg . 5) END (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Reg . 0) (Reg . 9) (Stat . OUTPUT) (Expr Num . -11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . LOAD) (Reg . 13) (Expr Num . -48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr . NOT) (Expr . EQ) (Expr . LT) (Reg . 8) (Expr . GT) (Reg . 0) (Expr Num . 28) (Expr Num . 91) (Stat . IF) (Reg . 3) (Stat . IF) (Reg . 4) (Stat . IF) (Expr Num . -12) (Stat . IF) (Reg . 12) (Stat . LOAD) (Reg . 10) (Expr . LT) (Reg . 9) (Reg . 8) ELSE (Stat . INPUT) (Reg . 4) END ELSE (Stat . LOAD) (Reg . 12) (Reg . 1) END ELSE (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Expr Num . -75) END END ELSE (Stat . OUTPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr . MUL) (Reg . 11) (Reg . 8) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 7) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Expr Num . 68) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . LOAD) (Reg . 11) (Expr Num . 26) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 3) (Expr Num . 74) END (Stat . LOAD) (Reg . 0) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 68) (Stat . IF) (Expr Num . 70) (Stat . INPUT) (Reg . 1) ELSE (Stat . LOAD) (Reg . 12) (Expr Num . 28) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 12) (Stat . IF) (Reg . 1) (Stat . IF) (Expr . SUB) (Reg . 8) (Reg . 6) (Stat . INPUT) (Reg . 6) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . LOAD) (Reg . 13) (Expr Num . -39) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -97) (Stat . OUTPUT) (Expr Num . -32) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . DIV) (Expr Num . -90) (Expr Num . -38) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . DIV) (Expr Num . -6) (Expr . DIV) (Reg . 2) (Expr . MUL) (Expr Num . -13) (Expr Num . -78) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 3) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr . OR) (Expr . NOT) (Expr Num . 87) (Expr . LT) (Reg . 9) (Expr Num . -64) (Stat . OUTPUT) (Expr Num . 49) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -65) (Stat . OUTPUT) (Reg . 12) END (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . IF) (Reg . 3) (Stat . IF) (Reg . 3) (Stat . IF) (Expr Num . -66) (Stat . LOAD) (Reg . 11) (Reg . 14) END ELSE (Stat . INPUT) (Reg . 6) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . LOAD) (Reg . 0) (Expr Num . -92) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 13) (Stat . LOAD) (Reg . 0) (Expr Num . -97) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 11) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -83) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Expr Num . 43) (Stat . INPUT) (Reg . 13) ELSE (Stat . INPUT) (Reg . 5) END END (Stat . LOAD) (Reg . 12) (Expr Num . 24) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -93) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Expr Num . 15) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Expr Num . -39) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 5) (Stat . IF) (Expr Num . -80) (Stat . INPUT) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -32) (Stat . OUTPUT) (Expr Num . 50) ELSE (Stat . INPUT) (Reg . 14) END (Stat . OUTPUT) (Expr Num . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . 51) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Expr . LT) (Expr . OR) (Reg . 6) (Expr Num . -82) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 2) (Stat . IF) (Expr Num . 30) (Stat . LOAD) (Reg . 1) (Expr Num . -58) ELSE (Stat . IF) (Expr . OR) (Expr Num . 57) (Reg . 9) (Stat . INPUT) (Reg . 6) ELSE (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Reg . 12) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 83) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . ADD) (Expr . EQ) (Expr . AND) (Reg . 1) (Reg . 12) (Reg . 2) (Expr Num . 46) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 9) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 2) (Stat . IF) (Reg . 8) (Stat . IF) (Expr Num . -30) (Stat . INPUT) (Reg . 8) ELSE (Stat . INPUT) (Reg . 2) END ELSE (Stat . INPUT) (Reg . 6) END END (Stat . IF) (Reg . 12) (Stat . IF) (Reg . 7) (Stat . LOAD) (Reg . 8) (Reg . 7) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -73) (Stat . INPUT) (Reg . 13) ELSE (Stat . IF) (Expr . OR) (Reg . 9) (Expr Num . -75) (Stat . INPUT) (Reg . 1) END END (Stat . LOAD) (Reg . 0) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 6) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -71) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 6) ELSE (Stat . LOAD) (Reg . 14) (Expr Num . -39) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 4) (Stat . IF) (Reg . 2) (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 13) ELSE (Stat . INPUT) (Reg . 11) END ELSE (Stat . OUTPUT) (Expr Num . -92) END ELSE (Stat . OUTPUT) (Expr . LT) (Expr Num . 64) (Expr Num . -72) END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 35) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 9) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 46) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . IF) (Expr . GT) (Expr . LT) (Reg . 9) (Reg . 6) (Expr Num . -64) (Stat . INPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 9) (Stat . OUTPUT) (Expr Num . -19) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 7) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 1) (Stat . IF) (Reg . 0) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -10) (Stat . LOAD) (Reg . 6) (Expr Num . -26) END (Stat . IF) (Reg . 2) (Stat . IF) (Reg . 9) (Stat . IF) (Expr Num . 5) (Stat . OUTPUT) (Reg . 13) END END ELSE (Stat . IF) (Expr Num . -83) (Stat . OUTPUT) (Expr Num . 43) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . LOAD) (Reg . 5) (Expr Num . 85) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . IF) (Expr . SUB) (Expr Num . 4) (Expr . AND) (Expr Num . 30) (Reg . 2) (Stat . IF) (Reg . 12) (Stat . OUTPUT) (Expr . LT) (Expr Num . -78) (Reg . 5) ELSE (Stat . IF) (Expr Num . -5) (Stat . LOAD) (Reg . 3) (Expr Num . 79) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 12) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -50) (Stat . OUTPUT) (Expr Num . -79) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -75) (Stat . IF) (Expr Num . 38) (Stat . INPUT) (Reg . 1) END ELSE (Stat . OUTPUT) (Expr Num . 95) END (Stat . IF) (Reg . 0) (Stat . OUTPUT) (Expr Num . 23) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -55) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 2) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -73) (Stat . OUTPUT) (Expr Num . 38) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr Num . -65) (Stat . LOAD) (Reg . 9) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 2) (Stat . IF) (Reg . 9) (Stat . INPUT) (Reg . 13) ELSE (Stat . IF) (Expr Num . -92) (Stat . LOAD) (Reg . 12) (Expr . NOT) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 25) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Reg . 13) ELSE (Stat . LOAD) (Reg . 10) (Expr Num . -47) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -94) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . 20) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 7) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Reg . 11) (Expr Num . -38) (Stat . IF) (Expr . MUL) (Expr Num . 96) (Expr Num . -59) (Stat . INPUT) (Reg . 14) END ELSE (Stat . OUTPUT) (Reg . 3) END (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr . ADD) (Expr . SUB) (Expr . AND) (Expr Num . 97) (Reg . 10) (Expr Num . 85) (Expr . LT) (Expr Num . 52) (Expr Num . -89) (Stat . IF) (Expr Num . 99) (Stat . LOAD) (Reg . 1) (Reg . 6) ELSE (Stat . INPUT) (Reg . 4) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 1) (Stat . LOAD) (Reg . 5) (Expr Num . -8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -62) (Stat . IF) (Expr Num . -49) (Stat . LOAD) (Reg . 7) (Reg . 13) ELSE (Stat . LOAD) (Reg . 11) (Expr . DIV) (Reg . 8) (Reg . 3) END END (Stat . IF) (Expr Num . 78) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 10) (Expr Num . 9) END (Stat . IF) (Reg . 12) (Stat . IF) (Expr . NOT) (Expr Num . -57) (Stat . OUTPUT) (Expr Num . -61) END ELSE (Stat . LOAD) (Reg . 6) (Expr . MUL) (Expr Num . 25) (Expr Num . -87) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -31) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Reg . 10) (Expr . DIV) (Expr . ADD) (Expr . LT) (Expr . ADD) (Expr Num . 82) (Reg . 9) (Reg . 11) (Reg . 13) (Expr Num . 83) (Stat . OUTPUT) (Expr Num . 85) ELSE (Stat . IF) (Expr Num . 45) (Stat . IF) (Reg . 6) (Stat . IF) (Expr Num . 30) (Stat . LOAD) (Reg . 14) (Reg . 6) ELSE (Stat . LOAD) (Reg . 14) (Reg . 2) END ELSE (Stat . IF) (Expr Num . 44) (Stat . OUTPUT) (Reg . 5) ELSE (Stat . LOAD) (Reg . 1) (Reg . 14) END END END END (Stat . LOAD) (Reg . 13) (Expr Num . 61) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 3) (Expr Num . 2) ELSE (Stat . IF) (Expr Num . -38) (Stat . INPUT) (Reg . 12) ELSE (Stat . LOAD) (Reg . 8) (Expr Num . 6) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 0) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Expr . EQ) (Reg . 12) (Expr Num . -81) (Stat . OUTPUT) (Expr . DIV) (Expr Num . 93) (Expr Num . 12) END ELSE (Stat . INPUT) (Reg . 11) END (Stat . OUTPUT) (Expr Num . -21) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . -49) (Stat . LOAD) (Reg . 9) (Expr Num . -68) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr . MUL) (Reg . 4) (Reg . 9) (Expr . NOT) (Expr Num . -75) (Stat . OUTPUT) (Expr Num . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 45) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . 71) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr Num . -61) END (Stat . IF) (Reg . 1) (Stat . IF) (Expr Num . 76) (Stat . IF) (Expr Num . -7) (Stat . IF) (Expr Num . 82) (Stat . LOAD) (Reg . 5) (Reg . 10) END END ELSE (Stat . LOAD) (Reg . 11) (Expr Num . 49) END ELSE (Stat . INPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 4) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 63) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . LOAD) (Reg . 5) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Expr Num . 70) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -44) (Stat . LOAD) (Reg . 5) (Expr Num . 69) END (Stat . IF) (Expr Num . 79) (Stat . OUTPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 25) (Stat . LOAD) (Reg . 5) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 6) ELSE (Stat . INPUT) (Reg . 8) END (Stat . LOAD) (Reg . 8) (Expr Num . 73) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -10) (Stat . LOAD) (Reg . 11) (Reg . 8) END (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr . LT) (Expr Num . 11) (Reg . 5) (Stat . LOAD) (Reg . 10) (Expr Num . 91) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -55) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr . OR) (Reg . 2) (Expr Num . 93) (Stat . IF) (Reg . 11) (Stat . INPUT) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 7) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr Num . -13) (Stat . LOAD) (Reg . 10) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Expr Num . 56) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Expr Num . 33) (Stat . IF) (Expr Num . 96) (Stat . INPUT) (Reg . 0) ELSE (Stat . OUTPUT) (Expr Num . -42) END ELSE (Stat . OUTPUT) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 7) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Expr Num . 32) END (Stat . LOAD) (Reg . 0) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 11) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 9) (Expr Num . -17) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . DIV) (Expr Num . -64) (Expr Num . -48) (Stat . LOAD) (Reg . 4) (Reg . 3) ELSE (Stat . INPUT) (Reg . 5) END (Stat . LOAD) (Reg . 1) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -63) (Stat . IF) (Reg . 6) (Stat . IF) (Expr . SUB) (Reg . 4) (Expr . GT) (Reg . 14) (Expr Num . 72) (Stat . LOAD) (Reg . 10) (Expr Num . 43) ELSE (Stat . IF) (Expr Num . -85) (Stat . OUTPUT) (Reg . 10) ELSE (Stat . INPUT) (Reg . 0) END END END END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . 60) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 92) (Stat . LOAD) (Reg . 13) (Expr . ADD) (Reg . 10) (Expr Num . 62) END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 9) END (Stat . OUTPUT) (Expr Num . -6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -49) (Stat . INPUT) (Reg . 7) END (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Expr Num . 86) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 94) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -70) (Stat . IF) (Reg . 3) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 80) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 0) END ELSE (Stat . IF) (Expr Num . -91) (Stat . IF) (Expr . AND) (Expr Num . 91) (Reg . 10) (Stat . INPUT) (Reg . 1) END END END (Stat . OUTPUT) (Expr . OR) (Expr Num . 41) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . OR) (Expr . DIV) (Expr . SUB) (Expr Num . -56) (Expr Num . -25) (Expr . NOT) (Reg . 12) (Expr Num . 10) (Stat . OUTPUT) (Reg . 7) ELSE (Stat . OUTPUT) (Expr Num . -95) END (Stat . IF) (Reg . 0) (Stat . INPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -63) (Stat . OUTPUT) (Expr . SUB) (Expr . GT) (Reg . 4) (Reg . 13) (Expr Num . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -31) (Stat . IF) (Expr Num . -2) (Stat . IF) (Reg . 9) (Stat . OUTPUT) (Expr Num . -32) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Reg . 8) ELSE (Stat . IF) (Expr Num . 31) (Stat . INPUT) (Reg . 1) ELSE (Stat . IF) (Expr Num . 53) (Stat . OUTPUT) (Reg . 13) ELSE (Stat . IF) (Expr Num . 44) (Stat . INPUT) (Reg . 6) ELSE (Stat . INPUT) (Reg . 9) END END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -2) (Stat . LOAD) (Reg . 2) (Expr Num . 52) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr . SUB) (Reg . 13) (Reg . 2) (Stat . OUTPUT) (Expr . AND) (Expr . LT) (Reg . 12) (Expr Num . 62) (Expr Num . 39) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Reg . 14) (Stat . LOAD) (Reg . 11) (Expr Num . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . IF) (Expr Num . 28) (Stat . LOAD) (Reg . 1) (Expr Num . -18) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . INPUT) (Reg . 9) ELSE (Stat . OUTPUT) (Reg . 3) END (Stat . LOAD) (Reg . 5) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . -87) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 0) ELSE (Stat . IF) (Reg . 11) (Stat . IF) (Expr Num . -79) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Expr Num . 28) (Stat . INPUT) (Reg . 1) ELSE (Stat . INPUT) (Reg . 14) END END END END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Expr . EQ) (Expr Num . 65) (Expr Num . 96) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 85) (Stat . OUTPUT) (Expr . EQ) (Expr . MUL) (Expr Num . 34) (Reg . 8) (Expr Num . -6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 2) ELSE (Stat . IF) (Expr Num . -35) (Stat . OUTPUT) (Expr Num . -93) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 6) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -19) (Stat . LOAD) (Reg . 14) (Expr Num . -71) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Expr Num . -6) END (Stat . LOAD) (Reg . 5) (Expr Num . 52) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr . NOT) (Reg . 10) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . INPUT) (Reg . 12) ELSE (Stat . LOAD) (Reg . 0) (Reg . 2) END (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . IF) (Reg . 11) (Stat . OUTPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . AND) (Expr . ADD) (Expr . SUB) (Expr Num . -99) (Reg . 0) (Reg . 13) (Reg . 7) (Stat . LOAD) (Reg . 5) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Expr Num . -83) (Stat . LOAD) (Reg . 12) (Expr Num . -61) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Expr Num . 58) END (Stat . IF) (Reg . 5) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 5) END ELSE (Stat . INPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 7) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 32) (Stat . LOAD) (Reg . 0) (Expr Num . 38) END (Stat . LOAD) (Reg . 3) (Expr . AND) (Expr . MUL) (Expr . LT) (Expr Num . -2) (Reg . 7) (Expr Num . 70) (Expr Num . 36) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . IF) (Expr . SUB) (Reg . 13) (Expr Num . 93) (Stat . OUTPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 4) (Stat . LOAD) (Reg . 7) (Expr Num . -5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . LOAD) (Reg . 10) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 2) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . 6) (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Reg . 1) ELSE (Stat . IF) (Expr Num . 22) (Stat . LOAD) (Reg . 13) (Expr Num . -61) ELSE (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 7) (Reg . 4) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . OUTPUT) (Reg . 13) END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . LOAD) (Reg . 8) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Expr Num . 65) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 10) (Stat . LOAD) (Reg . 11) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr Num . -26) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . GT) (Expr Num . 50) (Reg . 3) (Stat . IF) (Expr Num . 9) (Stat . OUTPUT) (Reg . 6) ELSE (Stat . OUTPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -83) (Stat . IF) (Reg . 11) (Stat . IF) (Expr Num . -20) (Stat . LOAD) (Reg . 11) (Expr Num . -61) END ELSE (Stat . INPUT) (Reg . 14) END ELSE (Stat . OUTPUT) (Expr . ADD) (Reg . 10) (Expr Num . -10) END (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Expr Num . -53) (Stat . OUTPUT) (Expr . LT) (Reg . 9) (Expr Num . -39) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 2) (Stat . LOAD) (Reg . 1) (Expr . GT) (Expr Num . 5) (Expr Num . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 0) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . 12) (Stat . LOAD) (Reg . 1) (Expr Num . -68) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 8) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 79) (Stat . OUTPUT) (Expr Num . 75) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 50) (Stat . IF) (Expr . ADD) (Reg . 0) (Expr . ADD) (Expr Num . 9) (Reg . 7) (Stat . IF) (Reg . 2) (Stat . IF) (Expr Num . -43) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 4) (Reg . 14) END ELSE (Stat . OUTPUT) (Reg . 7) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . 96) (Stat . IF) (Expr Num . -99) (Stat . LOAD) (Reg . 2) (Reg . 1) END END ELSE (Stat . INPUT) (Reg . 0) END (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Expr Num . 70) ELSE (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . LOAD) (Reg . 12) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . -46) (Stat . IF) (Reg . 10) (Stat . IF) (Reg . 3) (Stat . IF) (Expr . DIV) (Reg . 8) (Expr Num . 94) (Stat . LOAD) (Reg . 11) (Expr Num . -65) END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . 64) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -65) (Stat . OUTPUT) (Expr Num . -79) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 95) (Stat . OUTPUT) (Expr Num . -80) END (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -92) (Stat . LOAD) (Reg . 10) (Expr Num . -73) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 4) (Expr Num . 43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 29) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Expr Num . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Expr Num . -5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -66) (Stat . IF) (Expr Num . 43) (Stat . OUTPUT) (Expr Num . 27) ELSE (Stat . IF) (Reg . 7) (Stat . OUTPUT) (Expr Num . 12) ELSE (Stat . OUTPUT) (Expr . NOT) (Expr . SUB) (Expr Num . -50) (Expr . DIV) (Expr Num . -83) (Reg . 3) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Expr Num . 41) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . LOAD) (Reg . 14) (Expr Num . -88) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . -100) (Stat . IF) (Expr . OR) (Reg . 2) (Expr Num . -93) (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 5) (Reg . 1) ELSE (Stat . IF) (Expr Num . -25) (Stat . INPUT) (Reg . 7) END END ELSE (Stat . INPUT) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 13) (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 1) ELSE (Stat . LOAD) (Reg . 1) (Expr Num . 14) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 4) (Stat . INPUT) (Reg . 11) ELSE (Stat . IF) (Expr Num . -71) (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Expr . LT) (Expr Num . 65) (Reg . 7) END END END (Stat . IF) (Reg . 14) (Stat . IF) (Reg . 9) (Stat . INPUT) (Reg . 12) ELSE (Stat . INPUT) (Reg . 10) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Reg . 8) (Reg . 9) (Stat . LOAD) (Reg . 0) (Expr . MUL) (Reg . 12) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . IF) (Reg . 3) (Stat . OUTPUT) (Expr Num . 71) ELSE (Stat . OUTPUT) (Expr . SUB) (Expr . NOT) (Reg . 1) (Reg . 10) END ELSE (Stat . LOAD) (Reg . 1) (Expr Num . -95) END (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr . GT) (Reg . 11) (Reg . 11) ELSE (Stat . LOAD) (Reg . 4) (Expr Num . -31) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 5) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 5) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . IF) (Reg . 2) (Stat . LOAD) (Reg . 1) (Expr Num . 5) ELSE (Stat . LOAD) (Reg . 2) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 13) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . 41) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -49) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . GT) (Reg . 10) (Expr Num . -85) (Stat . IF) (Expr Num . 56) (Stat . OUTPUT) (Expr . LT) (Expr Num . 42) (Expr Num . 20) END ELSE (Stat . INPUT) (Reg . 0) END (Stat . LOAD) (Reg . 5) (Expr Num . -57) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 12) (Stat . OUTPUT) (Expr . ADD) (Reg . 14) (Expr Num . -68) ELSE (Stat . LOAD) (Reg . 13) (Reg . 3) END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 65) (Stat . IF) (Expr Num . -29) (Stat . OUTPUT) (Expr Num . 86) END ELSE (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 11) (Reg . 3) ELSE (Stat . LOAD) (Reg . 0) (Reg . 14) END END (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Expr . LT) (Expr Num . -30) (Expr Num . 24) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . ADD) (Expr Num . -79) (Reg . 13) (Stat . LOAD) (Reg . 13) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 70) (Stat . LOAD) (Reg . 9) (Expr Num . -96) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . 51) (Stat . LOAD) (Reg . 8) (Expr Num . 43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 8) (Expr . OR) (Expr Num . -61) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -10) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Reg . 14) (Reg . 3) (Stat . OUTPUT) (Expr . MUL) (Reg . 13) (Expr Num . 53) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr Num . 31) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . IF) (Reg . 13) (Stat . INPUT) (Reg . 11) ELSE (Stat . LOAD) (Reg . 5) (Expr Num . 27) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . LT) (Reg . 11) (Expr . DIV) (Expr . EQ) (Expr Num . 27) (Expr Num . -55) (Reg . 2) (Stat . IF) (Reg . 1) (Stat . LOAD) (Reg . 0) (Reg . 11) ELSE (Stat . OUTPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 70) (Stat . IF) (Expr . DIV) (Expr Num . -33) (Expr Num . 48) (Stat . IF) (Expr Num . 27) (Stat . OUTPUT) (Expr Num . -58) END ELSE (Stat . LOAD) (Reg . 5) (Expr Num . -24) END END (Stat . IF) (Expr Num . -60) (Stat . INPUT) (Reg . 9) ELSE (Stat . OUTPUT) (Expr Num . 58) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . IF) (Expr Num . 62) (Stat . LOAD) (Reg . 10) (Expr Num . 73) END END (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 29) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . IF) (Reg . 13) (Stat . LOAD) (Reg . 2) (Expr Num . -72) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 5) (Stat . IF) (Reg . 5) (Stat . INPUT) (Reg . 1) ELSE (Stat . OUTPUT) (Reg . 8) END ELSE (Stat . INPUT) (Reg . 12) END (Stat . IF) (Expr Num . -83) (Stat . LOAD) (Reg . 6) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -24) (Stat . LOAD) (Reg . 10) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . -27) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 21) (Stat . INPUT) (Reg . 6) END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -81) (Stat . IF) (Reg . 2) (Stat . IF) (Expr Num . -3) (Stat . IF) (Expr Num . 1) (Stat . IF) (Reg . 1) (Stat . LOAD) (Reg . 3) (Expr Num . -21) END END END ELSE (Stat . IF) (Expr Num . 54) (Stat . OUTPUT) (Expr Num . 0) ELSE (Stat . OUTPUT) (Reg . 8) END END ELSE (Stat . OUTPUT) (Reg . 5) END (Stat . IF) (Reg . 13) (Stat . LOAD) (Reg . 5) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 79) (Stat . OUTPUT) (Expr . LT) (Reg . 10) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . IF) (Reg . 12) (Stat . IF) (Expr Num . 28) (Stat . IF) (Expr Num . -46) (Stat . IF) (Expr Num . -59) (Stat . OUTPUT) (Expr Num . -59) END END ELSE (Stat . LOAD) (Reg . 10) (Expr Num . -30) END ELSE (Stat . OUTPUT) (Expr . EQ) (Reg . 8) (Expr . OR) (Reg . 1) (Expr Num . -31) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 14) (Reg . 8) ELSE (Stat . LOAD) (Reg . 4) (Expr Num . 22) END (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 56) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . IF) (Expr Num . 53) (Stat . LOAD) (Reg . 8) (Expr Num . 54) ELSE (Stat . INPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 10) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Expr Num . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 8) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr . DIV) (Expr Num . -10) (Expr Num . -42) (Stat . LOAD) (Reg . 8) (Expr Num . -28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 7) (Stat . OUTPUT) (Expr . DIV) (Expr . SUB) (Reg . 9) (Reg . 8) (Expr Num . 17) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Expr Num . 84) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr . ADD) (Expr Num . 24) (Expr Num . 93) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . IF) (Reg . 9) (Stat . INPUT) (Reg . 12) ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Reg . 7) (Stat . LOAD) (Reg . 5) (Expr Num . -93) END ELSE (Stat . IF) (Reg . 10) (Stat . INPUT) (Reg . 4) END END (Stat . IF) (Expr Num . 56) (Stat . OUTPUT) (Expr . SUB) (Reg . 0) (Expr . OR) (Expr . EQ) (Expr Num . 89) (Expr Num . 17) (Reg . 12) ELSE (Stat . INPUT) (Reg . 12) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -51) (Stat . OUTPUT) (Expr . OR) (Reg . 11) (Expr . LT) (Expr Num . 29) (Expr Num . 5) END (Stat . LOAD) (Reg . 3) (Expr . NOT) (Expr Num . -31) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . LOAD) (Reg . 1) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Reg . 11) (Expr . AND) (Reg . 9) (Expr . AND) (Reg . 14) (Reg . 5) (Stat . LOAD) (Reg . 8) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -54) (Stat . OUTPUT) (Expr Num . -17) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 10) (Stat . IF) (Reg . 6) (Stat . IF) (Reg . 13) (Stat . INPUT) (Reg . 14) ELSE (Stat . IF) (Expr Num . -32) (Stat . OUTPUT) (Expr Num . -37) END END ELSE (Stat . IF) (Reg . 11) (Stat . OUTPUT) (Expr Num . -7) ELSE (Stat . INPUT) (Reg . 4) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Expr Num . -18) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Expr Num . -68) (Reg . 6) (Stat . OUTPUT) (Expr Num . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . SUB) (Reg . 4) (Expr . EQ) (Reg . 5) (Reg . 7) (Stat . LOAD) (Reg . 9) (Expr . OR) (Expr Num . -88) (Expr . EQ) (Expr Num . -77) (Reg . 6) ELSE (Stat . IF) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . LOAD) (Reg . 10) (Reg . 10) END ELSE (Stat . IF) (Reg . 14) (Stat . IF) (Expr Num . 77) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr Num . 68) END ELSE (Stat . INPUT) (Reg . 4) END ELSE (Stat . IF) (Expr . LT) (Expr Num . -21) (Expr Num . 26) (Stat . OUTPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 11) (Reg . 5) END END END END (Stat . IF) (Expr Num . 71) (Stat . INPUT) (Reg . 14) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 5) (Expr Num . 97) END (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 71) (Stat . IF) (Expr Num . -19) (Stat . LOAD) (Reg . 0) (Reg . 14) END ELSE (Stat . LOAD) (Reg . 9) (Reg . 10) END (Stat . LOAD) (Reg . 3) (Expr Num . -13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . LOAD) (Reg . 0) (Expr Num . 36) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 3) (Reg . 13) ELSE (Stat . INPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . IF) (Expr Num . 92) (Stat . OUTPUT) (Expr Num . 87) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 80) (Stat . IF) (Reg . 10) (Stat . OUTPUT) (Expr . LT) (Expr Num . -78) (Reg . 12) END ELSE (Stat . OUTPUT) (Expr Num . -7) END (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -43) (Stat . IF) (Reg . 2) (Stat . OUTPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 81) (Stat . LOAD) (Reg . 1) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . OUTPUT) (Expr Num . 95) END (Stat . IF) (Expr . OR) (Reg . 1) (Reg . 0) (Stat . IF) (Expr Num . -26) (Stat . LOAD) (Reg . 2) (Expr Num . 51) ELSE (Stat . LOAD) (Reg . 1) (Reg . 8) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -98) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 13) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . LOAD) (Reg . 1) (Expr Num . -80) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 1) (Stat . IF) (Expr . NOT) (Expr Num . 89) (Stat . LOAD) (Reg . 13) (Expr Num . -81) ELSE (Stat . INPUT) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . OUTPUT) (Expr Num . 18) END (Stat . LOAD) (Reg . 11) (Expr Num . 85) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . IF) (Expr . DIV) (Expr Num . -17) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . 54) ELSE (Stat . IF) (Expr . AND) (Expr . DIV) (Reg . 8) (Expr . DIV) (Expr Num . -35) (Expr . DIV) (Expr Num . 68) (Expr Num . 45) (Expr Num . -62) (Stat . LOAD) (Reg . 7) (Reg . 6) END END END (Stat . LOAD) (Reg . 7) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . LOAD) (Reg . 3) (Expr Num . -66) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . LOAD) (Reg . 12) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 6) (Reg . 12) (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 6) ELSE (Stat . LOAD) (Reg . 9) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -19) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . -53) (Stat . OUTPUT) (Expr Num . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 46) (Stat . IF) (Expr . SUB) (Expr . SUB) (Expr Num . 95) (Expr Num . -20) (Reg . 6) (Stat . INPUT) (Reg . 14) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -4) (Stat . INPUT) (Reg . 5) ELSE (Stat . IF) (Expr Num . -40) (Stat . INPUT) (Reg . 0) ELSE (Stat . IF) (Reg . 12) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 12) (Expr Num . 11) END END END (Stat . LOAD) (Reg . 9) (Expr Num . -46) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr . SUB) (Expr Num . 74) (Expr Num . 74) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . IF) (Expr Num . 50) (Stat . IF) (Expr . AND) (Expr Num . 42) (Expr Num . 82) (Stat . LOAD) (Reg . 8) (Expr . EQ) (Expr Num . 28) (Expr Num . -79) ELSE (Stat . OUTPUT) (Expr . MUL) (Reg . 12) (Expr Num . -49) END ELSE (Stat . OUTPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . IF) (Expr Num . 16) (Stat . IF) (Expr Num . -32) (Stat . INPUT) (Reg . 2) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . IF) (Expr Num . 52) (Stat . INPUT) (Reg . 0) ELSE (Stat . INPUT) (Reg . 9) END ELSE (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Expr . AND) (Expr Num . 66) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 30) (Stat . IF) (Expr Num . 54) (Stat . LOAD) (Reg . 5) (Expr Num . -5) ELSE (Stat . INPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -91) (Stat . INPUT) (Reg . 6) END (Stat . OUTPUT) (Expr Num . 43) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Expr Num . -84) (Stat . IF) (Expr Num . 85) (Stat . LOAD) (Reg . 0) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . AND) (Reg . 11) (Expr Num . 66) (Stat . INPUT) (Reg . 7) END (Stat . LOAD) (Reg . 12) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr . NOT) (Expr Num . -81) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . IF) (Reg . 1) (Stat . IF) (Reg . 2) (Stat . OUTPUT) (Reg . 5) ELSE (Stat . INPUT) (Reg . 1) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 2) (Stat . LOAD) (Reg . 6) (Expr Num . 83) END (Stat . IF) (Expr Num . 33) (Stat . IF) (Reg . 1) (Stat . LOAD) (Reg . 8) (Reg . 5) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -51) (Stat . IF) (Expr . OR) (Expr Num . -42) (Expr . GT) (Expr . EQ) (Reg . 12) (Reg . 6) (Expr Num . 65) (Stat . OUTPUT) (Expr Num . 86) END ELSE (Stat . LOAD) (Reg . 14) (Reg . 14) END (Stat . OUTPUT) (Expr Num . -48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . LT) (Reg . 9) (Reg . 10) (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -47) (Stat . LOAD) (Reg . 2) (Expr Num . 95) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 13) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . -53) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -63) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . LOAD) (Reg . 1) (Expr . MUL) (Reg . 3) (Expr . GT) (Expr Num . 46) (Expr Num . -25) ELSE (Stat . LOAD) (Reg . 5) (Expr Num . -91) END (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 3) (Expr Num . 28) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 11) (Expr Num . 88) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . -54) (Stat . IF) (Expr Num . -27) (Stat . IF) (Expr Num . 92) (Stat . LOAD) (Reg . 4) (Reg . 0) END ELSE (Stat . OUTPUT) (Expr Num . -55) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -11) (Stat . LOAD) (Reg . 0) (Expr . ADD) (Expr . SUB) (Expr . AND) (Reg . 7) (Expr Num . -34) (Expr . OR) (Reg . 9) (Reg . 6) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr . GT) (Reg . 4) (Reg . 3) (Stat . IF) (Reg . 13) (Stat . IF) (Reg . 2) (Stat . IF) (Reg . 10) (Stat . INPUT) (Reg . 7) END END ELSE (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -9) (Stat . INPUT) (Reg . 14) END (Stat . IF) (Reg . 2) (Stat . IF) (Expr . LT) (Reg . 9) (Reg . 12) (Stat . LOAD) (Reg . 14) (Expr . SUB) (Reg . 12) (Reg . 3) ELSE (Stat . LOAD) (Reg . 3) (Reg . 7) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -85) (Stat . IF) (Expr . MUL) (Reg . 1) (Reg . 13) (Stat . INPUT) (Reg . 11) ELSE (Stat . IF) (Reg . 14) (Stat . INPUT) (Reg . 14) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 4) (Stat . LOAD) (Reg . 4) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr . LT) (Reg . 10) (Expr Num . -92) (Stat . IF) (Expr Num . -87) (Stat . OUTPUT) (Expr Num . 77) ELSE (Stat . IF) (Expr Num . -44) (Stat . OUTPUT) (Expr Num . 15) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 69) (Stat . IF) (Expr Num . 90) (Stat . INPUT) (Reg . 12) END ELSE (Stat . INPUT) (Reg . 9) END (Stat . IF) (Reg . 12) (Stat . IF) (Expr . ADD) (Reg . 8) (Expr Num . -40) (Stat . OUTPUT) (Reg . 13) ELSE (Stat . OUTPUT) (Reg . 8) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 12) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . LOAD) (Reg . 0) (Expr Num . -49) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Reg . 7) (Stat . IF) (Expr . LT) (Expr Num . -53) (Reg . 10) (Stat . LOAD) (Reg . 8) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 46) (Stat . LOAD) (Reg . 11) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr . MUL) (Reg . 6) (Expr Num . 77) (Stat . IF) (Expr Num . 92) (Stat . LOAD) (Reg . 12) (Reg . 11) ELSE (Stat . OUTPUT) (Reg . 3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Reg . 10) (Expr Num . -7) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . LOAD) (Reg . 12) (Expr Num . 58) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -100) (Stat . LOAD) (Reg . 10) (Expr Num . -7) ELSE (Stat . INPUT) (Reg . 10) END (Stat . IF) (Reg . 12) (Stat . LOAD) (Reg . 10) (Reg . 5) ELSE (Stat . OUTPUT) (Expr Num . 85) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 13) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 7) ELSE (Stat . LOAD) (Reg . 6) (Expr Num . 59) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 79) (Stat . IF) (Expr Num . -27) (Stat . OUTPUT) (Reg . 14) ELSE (Stat . LOAD) (Reg . 5) (Expr . OR) (Reg . 14) (Expr Num . 54) END END (Stat . OUTPUT) (Expr Num . 25) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . LOAD) (Reg . 10) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Reg . 8) (Stat . LOAD) (Reg . 0) (Expr . LT) (Expr Num . -3) (Expr Num . -14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 11) (Stat . IF) (Reg . 2) (Stat . OUTPUT) (Expr Num . -23) ELSE (Stat . IF) (Reg . 13) (Stat . IF) (Reg . 10) (Stat . INPUT) (Reg . 7) ELSE (Stat . IF) (Expr Num . 84) (Stat . INPUT) (Reg . 11) END END ELSE (Stat . LOAD) (Reg . 0) (Reg . 5) END END END (Stat . IF) (Expr . DIV) (Reg . 4) (Expr Num . -74) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 7) (Stat . LOAD) (Reg . 5) (Reg . 7) ELSE (Stat . INPUT) (Reg . 7) END (Stat . IF) (Expr Num . -38) (Stat . OUTPUT) (Expr . EQ) (Expr Num . -83) (Reg . 9) ELSE (Stat . OUTPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . LOAD) (Reg . 1) (Expr . DIV) (Expr Num . 92) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . IF) (Expr . LT) (Reg . 6) (Reg . 14) (Stat . LOAD) (Reg . 8) (Expr . SUB) (Expr Num . 46) (Expr . DIV) (Expr . ADD) (Expr Num . -95) (Expr Num . 26) (Expr Num . 50) ELSE (Stat . IF) (Reg . 8) (Stat . LOAD) (Reg . 7) (Expr . AND) (Expr Num . 79) (Expr . DIV) (Expr Num . 8) (Expr Num . 24) ELSE (Stat . INPUT) (Reg . 4) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 12) (Expr Num . 93) END END (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 9) (Stat . IF) (Expr . SUB) (Reg . 0) (Expr Num . -27) (Stat . LOAD) (Reg . 0) (Expr Num . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 91) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -63) (Stat . IF) (Reg . 2) (Stat . INPUT) (Reg . 1) ELSE (Stat . OUTPUT) (Expr Num . 82) END END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . IF) (Expr . GT) (Expr Num . 78) (Expr . DIV) (Expr Num . -96) (Reg . 0) (Stat . INPUT) (Reg . 3) ELSE (Stat . OUTPUT) (Expr Num . -94) END ELSE (Stat . LOAD) (Reg . 5) (Expr Num . -67) END (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . LOAD) (Reg . 14) (Expr Num . 83) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 7) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 11) (Stat . LOAD) (Reg . 5) (Reg . 13) END (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -84) (Stat . IF) (Reg . 10) (Stat . OUTPUT) (Reg . 11) ELSE (Stat . OUTPUT) (Expr Num . 87) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 5) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . LOAD) (Reg . 4) (Expr Num . -46) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 92) (Stat . LOAD) (Reg . 13) (Expr Num . -93) ELSE (Stat . IF) (Expr . EQ) (Reg . 5) (Expr . DIV) (Expr . SUB) (Expr . LT) (Expr Num . 13) (Expr Num . -35) (Reg . 3) (Reg . 7) (Stat . INPUT) (Reg . 4) END END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . DIV) (Expr Num . -38) (Expr . EQ) (Reg . 14) (Expr Num . -94) (Stat . LOAD) (Reg . 1) (Reg . 6) ELSE (Stat . OUTPUT) (Expr Num . -36) END (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 5) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr . GT) (Expr Num . 11) (Reg . 8) (Expr Num . 62) (Stat . OUTPUT) (Expr Num . 26) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 6) (Reg . 11) END ELSE (Stat . OUTPUT) (Reg . 1) END (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr . OR) (Reg . 7) (Reg . 12) (Stat . LOAD) (Reg . 4) (Expr Num . 41) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . INPUT) (Reg . 9) END (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . -9) (Stat . IF) (Reg . 13) (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -7) (Stat . OUTPUT) (Expr Num . -90) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 2) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 81) (Stat . INPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -65) (Stat . IF) (Expr Num . -33) (Stat . OUTPUT) (Expr Num . 64) ELSE (Stat . LOAD) (Reg . 10) (Reg . 3) END END (Stat . LOAD) (Reg . 2) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -68) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 13) (Expr Num . 96) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . IF) (Reg . 7) (Stat . LOAD) (Reg . 1) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Expr Num . 8) (Stat . OUTPUT) (Expr Num . -14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . -69) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Expr . LT) (Reg . 10) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . -4) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . LOAD) (Reg . 2) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . IF) (Reg . 3) (Stat . INPUT) (Reg . 10) ELSE (Stat . INPUT) (Reg . 6) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . IF) (Expr Num . 36) (Stat . IF) (Expr Num . 33) (Stat . LOAD) (Reg . 1) (Expr Num . 72) END ELSE (Stat . INPUT) (Reg . 8) END END (Stat . LOAD) (Reg . 1) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . INPUT) (Reg . 9) ELSE (Stat . LOAD) (Reg . 7) (Expr Num . 97) END (Stat . OUTPUT) (Expr . ADD) (Reg . 10) (Expr . OR) (Expr Num . 0) (Expr Num . -51) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -8) (Stat . IF) (Reg . 2) (Stat . LOAD) (Reg . 12) (Reg . 13) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 3) (Stat . OUTPUT) (Expr . NOT) (Expr Num . 28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 10) (Stat . IF) (Reg . 4) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 1) (Expr Num . -96) END ELSE (Stat . IF) (Expr Num . -9) (Stat . OUTPUT) (Expr Num . -71) ELSE (Stat . OUTPUT) (Expr . DIV) (Expr Num . -10) (Expr Num . -52) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 5) (Stat . IF) (Reg . 12) (Stat . IF) (Expr . DIV) (Expr Num . 61) (Expr . LT) (Reg . 9) (Expr Num . 56) (Stat . OUTPUT) (Expr Num . 28) ELSE (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 4) (Expr Num . 86) END END END END (Stat . IF) (Expr Num . -94) (Stat . INPUT) (Reg . 0) ELSE (Stat . LOAD) (Reg . 13) (Expr Num . -84) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Reg . 9) (Stat . OUTPUT) (Expr . DIV) (Reg . 7) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr . AND) (Expr . EQ) (Expr Num . -96) (Reg . 2) (Expr Num . -29) (Stat . OUTPUT) (Expr Num . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . -47) (Stat . LOAD) (Reg . 2) (Expr . EQ) (Reg . 10) (Expr . DIV) (Expr Num . 86) (Expr . NOT) (Expr Num . 91) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . 69) (Stat . LOAD) (Reg . 2) (Expr . AND) (Expr Num . 87) (Expr Num . 95) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 13) (Reg . 11) (Stat . IF) (Expr . ADD) (Expr Num . -9) (Expr . AND) (Reg . 5) (Reg . 11) (Stat . LOAD) (Reg . 3) (Expr . EQ) (Reg . 10) (Reg . 12) ELSE (Stat . OUTPUT) (Expr Num . 64) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 26) (Stat . OUTPUT) (Reg . 14) ELSE (Stat . LOAD) (Reg . 9) (Expr . DIV) (Expr Num . 84) (Expr Num . 64) END (Stat . OUTPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . MUL) (Reg . 10) (Expr . SUB) (Reg . 0) (Expr Num . 93) (Stat . LOAD) (Reg . 5) (Expr Num . 64) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 13) (Stat . IF) (Expr . EQ) (Expr Num . 81) (Reg . 6) (Stat . INPUT) (Reg . 14) ELSE (Stat . IF) (Reg . 4) (Stat . IF) (Expr Num . 13) (Stat . INPUT) (Reg . 13) ELSE (Stat . INPUT) (Reg . 1) END END END END (Stat . LOAD) (Reg . 14) (Expr Num . 63) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -50) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . NOT) (Expr Num . 14) (Stat . LOAD) (Reg . 14) (Expr . GT) (Reg . 7) (Reg . 0) ELSE (Stat . INPUT) (Reg . 0) END (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . IF) (Expr . SUB) (Reg . 1) (Reg . 1) (Stat . IF) (Expr Num . 47) (Stat . OUTPUT) (Expr Num . -100) ELSE (Stat . IF) (Reg . 1) (Stat . IF) (Reg . 6) (Stat . INPUT) (Reg . 12) ELSE (Stat . INPUT) (Reg . 11) END ELSE (Stat . LOAD) (Reg . 13) (Expr . OR) (Expr . GT) (Reg . 4) (Expr Num . -50) (Expr . LT) (Reg . 12) (Expr Num . 51) END END ELSE (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 1) (Stat . INPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . SUB) (Expr Num . 79) (Reg . 2) (Stat . OUTPUT) (Expr Num . -50) END (Stat . LOAD) (Reg . 5) (Expr Num . -23) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . OUTPUT) (Expr Num . -16) END (Stat . OUTPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . LOAD) (Reg . 7) (Expr Num . -27) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 55) (Stat . LOAD) (Reg . 13) (Expr Num . 48) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 9) (Expr Num . -51) (Stat . IF) (Expr Num . -16) (Stat . LOAD) (Reg . 14) (Expr Num . 94) ELSE (Stat . IF) (Expr Num . -10) (Stat . LOAD) (Reg . 0) (Expr . GT) (Expr Num . 44) (Reg . 11) ELSE (Stat . IF) (Expr Num . 97) (Stat . IF) (Expr Num . -95) (Stat . INPUT) (Reg . 2) END END END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Reg . 14) (Stat . OUTPUT) (Expr Num . -96) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 7) (Stat . OUTPUT) (Expr . EQ) (Expr Num . -46) (Expr Num . 65) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . IF) (Expr Num . -65) (Stat . INPUT) (Reg . 2) ELSE (Stat . LOAD) (Reg . 14) (Reg . 9) END ELSE (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 5) (Reg . 9) ELSE (Stat . OUTPUT) (Expr Num . 15) END END (Stat . OUTPUT) (Expr Num . -61) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -65) (Stat . OUTPUT) (Expr Num . -78) END (Stat . IF) (Reg . 4) (Stat . INPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . -1) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . IF) (Expr Num . -64) (Stat . OUTPUT) (Expr Num . -92) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 2) (Stat . IF) (Expr Num . 18) (Stat . OUTPUT) (Expr . EQ) (Expr . ADD) (Expr . GT) (Reg . 13) (Reg . 11) (Expr Num . 40) (Reg . 10) ELSE (Stat . INPUT) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . LOAD) (Reg . 5) (Expr . ADD) (Expr . GT) (Reg . 14) (Expr . EQ) (Reg . 14) (Reg . 6) (Expr Num . 66) ELSE (Stat . INPUT) (Reg . 8) END (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . 42) (Stat . OUTPUT) (Expr Num . -81) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . LOAD) (Reg . 10) (Expr Num . -10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 76) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 84) (Stat . IF) (Expr Num . -17) (Stat . IF) (Expr Num . 35) (Stat . INPUT) (Reg . 0) ELSE (Stat . LOAD) (Reg . 14) (Reg . 14) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -69) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr . LT) (Expr Num . 45) (Reg . 13) (Expr Num . 82) (Stat . IF) (Expr Num . 7) (Stat . INPUT) (Reg . 7) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Reg . 3) (Reg . 0) (Stat . OUTPUT) (Reg . 12) ELSE (Stat . OUTPUT) (Reg . 13) END (Stat . IF) (Expr Num . 80) (Stat . INPUT) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 56) (Stat . IF) (Expr Num . -27) (Stat . IF) (Reg . 4) (Stat . OUTPUT) (Expr Num . -24) ELSE (Stat . LOAD) (Reg . 14) (Expr . NOT) (Reg . 14) END ELSE (Stat . LOAD) (Reg . 13) (Reg . 2) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Expr Num . -90) (Stat . IF) (Expr Num . -12) (Stat . IF) (Expr Num . -56) (Stat . OUTPUT) (Expr Num . -67) ELSE (Stat . OUTPUT) (Reg . 10) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 4) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . OUTPUT) (Expr Num . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . EQ) (Reg . 4) (Reg . 9) (Stat . IF) (Expr Num . 41) (Stat . OUTPUT) (Reg . 2) ELSE (Stat . OUTPUT) (Reg . 3) END END (Stat . INPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 11) (Reg . 7) (Stat . OUTPUT) (Expr . SUB) (Expr Num . -99) (Expr Num . 74) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 2) (Reg . 13) (Stat . IF) (Expr Num . 16) (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Reg . 11) ELSE (Stat . OUTPUT) (Expr Num . -89) END ELSE (Stat . LOAD) (Reg . 13) (Expr Num . -76) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 8) (Stat . INPUT) (Reg . 8) END (Stat . LOAD) (Reg . 0) (Expr . DIV) (Reg . 0) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 6) (Stat . IF) (Reg . 3) (Stat . OUTPUT) (Expr Num . 41) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . 89) (Stat . OUTPUT) (Expr . SUB) (Expr . NOT) (Expr Num . 23) (Expr . ADD) (Reg . 8) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . AND) (Reg . 6) (Reg . 12) (Stat . IF) (Reg . 2) (Stat . IF) (Expr Num . 70) (Stat . OUTPUT) (Reg . 13) ELSE (Stat . OUTPUT) (Expr Num . 0) END ELSE (Stat . LOAD) (Reg . 12) (Expr Num . 95) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 58) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr Num . -99) (Stat . LOAD) (Reg . 11) (Expr Num . 44) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Expr Num . 92) (Stat . LOAD) (Reg . 9) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 78) (Stat . OUTPUT) (Reg . 9) ELSE (Stat . LOAD) (Reg . 11) (Reg . 2) END (Stat . LOAD) (Reg . 1) (Expr Num . -78) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 12) (Stat . LOAD) (Reg . 10) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 4) (Expr . DIV) (Reg . 11) (Expr Num . -49) ELSE (Stat . LOAD) (Reg . 6) (Reg . 7) END (Stat . LOAD) (Reg . 5) (Expr . EQ) (Reg . 13) (Expr . NOT) (Expr Num . 57) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 3) (Reg . 14) END (Stat . IF) (Expr . OR) (Reg . 0) (Reg . 12) (Stat . LOAD) (Reg . 7) (Expr Num . -24) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr . AND) (Reg . 14) (Expr Num . 28) (Stat . IF) (Expr Num . 14) (Stat . INPUT) (Reg . 1) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Expr Num . 7) (Expr Num . 83) (Stat . OUTPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . LOAD) (Reg . 11) (Expr Num . 75) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 7) (Stat . IF) (Expr Num . 75) (Stat . LOAD) (Reg . 2) (Expr Num . 62) END END (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -25) (Stat . LOAD) (Reg . 8) (Reg . 1) END (Stat . INPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . EQ) (Expr Num . -8) (Expr Num . 46) (Stat . LOAD) (Reg . 4) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 5) (Stat . LOAD) (Reg . 6) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -11) (Stat . IF) (Reg . 11) (Stat . IF) (Reg . 9) (Stat . IF) (Expr Num . -56) (Stat . IF) (Expr . OR) (Expr Num . 16) (Reg . 11) (Stat . IF) (Reg . 12) (Stat . IF) (Expr Num . 93) (Stat . LOAD) (Reg . 11) (Expr . GT) (Expr . SUB) (Expr Num . -43) (Expr . SUB) (Expr Num . 3) (Reg . 9) (Reg . 10) END ELSE (Stat . LOAD) (Reg . 9) (Expr . NOT) (Expr . ADD) (Expr Num . -7) (Expr . ADD) (Expr . MUL) (Expr Num . 22) (Expr . EQ) (Expr . LT) (Reg . 3) (Expr Num . -98) (Expr Num . -20) (Expr Num . -62) END END END ELSE (Stat . IF) (Expr Num . -40) (Stat . LOAD) (Reg . 14) (Expr . GT) (Reg . 13) (Expr Num . -52) END END ELSE (Stat . LOAD) (Reg . 1) (Reg . 14) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 10) (Stat . IF) (Expr Num . -36) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 6) (Expr Num . -35) END END (Stat . LOAD) (Reg . 14) (Expr . SUB) (Expr Num . 13) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 6) (Stat . LOAD) (Reg . 12) (Expr Num . -56) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . IF) (Reg . 7) (Stat . IF) (Expr . OR) (Expr Num . 16) (Expr Num . 36) (Stat . INPUT) (Reg . 9) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -53) (Stat . IF) (Expr . DIV) (Expr Num . 7) (Reg . 11) (Stat . LOAD) (Reg . 14) (Reg . 14) ELSE (Stat . INPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 96) (Stat . INPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 91) (Stat . LOAD) (Reg . 14) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -56) (Stat . IF) (Reg . 5) (Stat . LOAD) (Reg . 3) (Reg . 10) ELSE (Stat . OUTPUT) (Expr Num . -3) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Reg . 7) (Stat . IF) (Reg . 13) (Stat . IF) (Expr Num . -61) (Stat . INPUT) (Reg . 8) ELSE (Stat . LOAD) (Reg . 0) (Reg . 3) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr . OR) (Reg . 4) (Expr Num . 25) (Stat . LOAD) (Reg . 10) (Expr . NOT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -55) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Reg . 10) (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr . NOT) (Reg . 2) ELSE (Stat . INPUT) (Reg . 5) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 12) (Expr Num . 68) (Stat . LOAD) (Reg . 0) (Expr Num . -28) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . -6) (Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 5) (Stat . OUTPUT) (Reg . 1) END (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Reg . 10) (Stat . OUTPUT) (Reg . 9) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr Num . -40) (Stat . IF) (Reg . 0) (Stat . LOAD) (Reg . 14) (Expr Num . -84) ELSE (Stat . INPUT) (Reg . 11) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Expr Num . 64) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -86) (Stat . INPUT) (Reg . 14) END (Stat . OUTPUT) (Expr Num . -96) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -31) (Stat . OUTPUT) (Expr Num . -46) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . IF) (Expr Num . 57) (Stat . OUTPUT) (Reg . 10) END END (Stat . IF) (Expr . EQ) (Expr . ADD) (Expr Num . 29) (Expr Num . 65) (Expr Num . 52) (Stat . IF) (Reg . 0) (Stat . INPUT) (Reg . 1) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 1) (Stat . OUTPUT) (Expr . GT) (Expr . SUB) (Expr Num . -82) (Expr . AND) (Reg . 9) (Reg . 4) (Expr . DIV) (Expr Num . 79) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 11) (Stat . LOAD) (Reg . 0) (Expr Num . 67) ELSE (Stat . LOAD) (Reg . 10) (Reg . 5) END (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -49) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 1) (Stat . OUTPUT) (Reg . 14) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 11) (Stat . LOAD) (Reg . 10) (Expr Num . -93) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 1) (Stat . OUTPUT) (Reg . 3) ELSE (Stat . IF) (Expr Num . 65) (Stat . OUTPUT) (Reg . 8) END END (Stat . LOAD) (Reg . 1) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 3) (Expr Num . 61) (Stat . IF) (Expr Num . 63) (Stat . LOAD) (Reg . 1) (Reg . 14) ELSE (Stat . LOAD) (Reg . 4) (Reg . 9) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 0) (Reg . 6) (Stat . LOAD) (Reg . 11) (Expr . ADD) (Expr Num . 30) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 14) (Stat . IF) (Reg . 6) (Stat . LOAD) (Reg . 6) (Reg . 8) ELSE (Stat . INPUT) (Reg . 0) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Reg . 3) (Stat . OUTPUT) (Expr Num . 50) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -25) (Stat . OUTPUT) (Expr Num . -51) END (Stat . IF) (Reg . 3) (Stat . LOAD) (Reg . 6) (Expr . ADD) (Reg . 0) (Reg . 8) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 12) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 11) (Stat . LOAD) (Reg . 8) (Expr Num . 75) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 17) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . LOAD) (Reg . 14) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 4) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . 54) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 7) (Expr . DIV) (Reg . 11) (Expr Num . -71) (Stat . INPUT) (Reg . 5) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 13) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 8) (Stat . INPUT) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 1) (Stat . OUTPUT) (Expr . ADD) (Reg . 9) (Expr Num . 45) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 10) (Expr Num . -54) (Stat . OUTPUT) (Expr . EQ) (Expr Num . 76) (Expr . EQ) (Expr Num . 37) (Reg . 1) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 7) (Stat . LOAD) (Reg . 6) (Reg . 12) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . 2) (Stat . OUTPUT) (Expr Num . -48) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 9) (Stat . OUTPUT) (Reg . 2) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 14) (Stat . INPUT) (Reg . 6) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . 10) (Stat . LOAD) (Reg . 1) (Expr . LT) (Expr Num . 24) (Reg . 10) ELSE (Stat . LOAD) (Reg . 14) (Expr Num . -25) END (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -43) (Stat . INPUT) (Reg . 6) END (Stat . IF) (Expr . GT) (Expr Num . 71) (Expr Num . -9) (Stat . LOAD) (Reg . 9) (Expr Num . 94) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 1) (Expr Num . -90) (Stat . LOAD) (Reg . 1) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Expr Num . -84) (Stat . IF) (Expr Num . 32) (Stat . INPUT) (Reg . 3) ELSE (Stat . LOAD) (Reg . 12) (Reg . 10) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 14) (Reg . 9) (Stat . OUTPUT) (Reg . 13) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 14) (Stat . OUTPUT) (Expr Num . 79) END (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 0) (Expr . OR) (Reg . 7) (Expr Num . 55) END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr Num . -69) (Stat . INPUT) (Reg . 10) ELSE (Stat . OUTPUT) (Expr Num . 51) END (Stat . IF) (Expr Num . 36) (Stat . IF) (Reg . 12) (Stat . LOAD) (Reg . 8) (Reg . 2) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Expr . NOT) (Expr . OR) (Expr Num . 23) (Expr . OR) (Expr Num . 79) (Expr Num . 0) (Stat . INPUT) (Reg . 9) END (Stat . IF) (Expr . AND) (Expr . SUB) (Expr Num . -26) (Expr Num . 30) (Reg . 9) (Stat . IF) (Expr Num . -52) (Stat . LOAD) (Reg . 1) (Reg . 11) ELSE (Stat . OUTPUT) (Reg . 12) END END (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . 66) (Stat . INPUT) (Reg . 3) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 3) (Stat . IF) (Reg . 14) (Stat . LOAD) (Reg . 0) (Reg . 0) END END (Stat . LOAD) (Reg . 11) (Expr Num . 52) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 4) (Stat . LOAD) (Reg . 1) (Expr Num . -40) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . IF) (Reg . 9) (Stat . OUTPUT) (Reg . 8) END (Stat . LOAD) (Reg . 1) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . OUTPUT) (Reg . 9) (Stat . LOAD) (Reg . 11) (Expr . DIV) (Reg . 12) (Expr . LT) (Expr Num . 59) (Reg . 8) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . INPUT) (Reg . 9) (Stat . INPUT) (Reg . 10) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 8) (Expr . OR) (Expr . ADD) (Reg . 9) (Expr Num . -41) (Reg . 1) (Stat . INPUT) (Reg . 7) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 5) (Reg . 12) (Stat . OUTPUT) (Reg . 11) (Stat . OUTPUT) (Reg . 0))
((Stat . INPUT) (Reg . 0) (Stat . LOAD) (Reg . 4) (Expr Num . -27) (Stat . LOAD) (Reg . 5) (Expr . SUB) (Reg . 10) (Expr Num . 17) (Stat . OUTPUT) (Reg . 0))
