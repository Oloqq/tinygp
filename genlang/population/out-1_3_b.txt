Creating population
-- TINY GP (Rust version) --
GENERATIONS=100
SEED=0
POPSIZE=10000
CROSSOVER_PROB=0.9
PMUT_PER_NODE=0.05
TSIZE=2
----------------------------------

Generation=0
Avg Fitness=-inf
Best Fitness=-10471
Avg Size=16
Best Individual: 
[Stat(INPUT), Reg(0), Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(2), Stat(OUTPUT), Reg(0)]

Generation=1
Avg Fitness=-inf
Best Fitness=-10471
Avg Size=16
Best Individual: 
[Stat(INPUT), Reg(0), Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(2), Stat(OUTPUT), Reg(0)]

Generation=2
Avg Fitness=-inf
Best Fitness=-10471
Avg Size=17
Best Individual: 
[Stat(INPUT), Reg(0), Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(2), Stat(OUTPUT), Reg(0)]

Generation=3
Avg Fitness=-inf
Best Fitness=-10471
Avg Size=18
Best Individual: 
[Stat(INPUT), Reg(0), Stat(IF), Expr(Num(-13)), Stat(INPUT), Reg(0), ELSE, Stat(LOAD), Reg(3), Reg(3), END, Stat(LOAD), Reg(4), Reg(4), Stat(OUTPUT), Reg(0)]

Generation=4
Avg Fitness=-inf
Best Fitness=-10014
Avg Size=18
Best Individual: 
[Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(4), Stat(IF), Expr(GT), Reg(0), Reg(3), Stat(IF), Reg(0), Stat(OUTPUT), Reg(0), ELSE, Stat(OUTPUT), Reg(3), END, ELSE, Stat(IF), Reg(3), Stat(OUTPUT), Reg(0), ELSE, Stat(IF), Reg(4), Stat(OUTPUT), Expr(EQ), Expr(Num(92)), Reg(0), ELSE, Stat(INPUT), Reg(4), END, END, END, Stat(LOAD), Reg(4), Expr(EQ), Reg(3), Expr(DIV), Expr(Num(-21)), Expr(ADD), Expr(NOT), Reg(1), Expr(Num(-53))]

Generation=5
Avg Fitness=-inf
Best Fitness=-10014
Avg Size=18
Best Individual: 
[Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(4), Stat(IF), Expr(GT), Reg(0), Reg(3), Stat(IF), Reg(0), Stat(OUTPUT), Reg(0), ELSE, Stat(OUTPUT), Reg(3), END, ELSE, Stat(IF), Reg(3), Stat(OUTPUT), Reg(0), ELSE, Stat(IF), Reg(4), Stat(OUTPUT), Expr(EQ), Expr(Num(92)), Reg(0), ELSE, Stat(INPUT), Reg(4), END, END, END, Stat(LOAD), Reg(4), Expr(EQ), Reg(3), Expr(DIV), Expr(Num(-21)), Expr(ADD), Expr(NOT), Reg(1), Expr(Num(-53))]

Generation=6
Avg Fitness=-inf
Best Fitness=-10014
Avg Size=19
Best Individual: 
[Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(4), Stat(IF), Expr(GT), Reg(0), Reg(3), Stat(IF), Reg(0), Stat(OUTPUT), Reg(0), ELSE, Stat(OUTPUT), Reg(3), END, ELSE, Stat(IF), Reg(3), Stat(OUTPUT), Reg(0), ELSE, Stat(IF), Reg(4), Stat(OUTPUT), Expr(EQ), Expr(Num(92)), Reg(0), ELSE, Stat(INPUT), Reg(4), END, END, END, Stat(LOAD), Reg(4), Expr(EQ), Reg(3), Expr(DIV), Expr(Num(-21)), Expr(ADD), Expr(NOT), Reg(1), Expr(Num(-53))]

Generation=7
Avg Fitness=-inf
Best Fitness=-10014
Avg Size=20
Best Individual: 
[Stat(INPUT), Reg(0), Stat(LOAD), Reg(4), Reg(4), Stat(IF), Expr(GT), Reg(0), Reg(3), Stat(IF), Reg(0), Stat(OUTPUT), Reg(0), ELSE, Stat(OUTPUT), Reg(3), END, ELSE, Stat(IF), Reg(3), Stat(OUTPUT), Reg(0), ELSE, Stat(IF), Reg(4), Stat(OUTPUT), Expr(EQ), Expr(Num(92)), Reg(0), ELSE, Stat(INPUT), Reg(4), END, END, END, Stat(LOAD), Reg(4), Expr(EQ), Reg(3), Expr(DIV), Expr(Num(-21)), Expr(ADD), Expr(NOT), Reg(1), Expr(Num(-53))]

Generation=8
Avg Fitness=-inf
Best Fitness=0
Avg Size=21
Best Individual: 
[Stat(INPUT), Reg(0), Stat(LOAD), Reg(2), Reg(3), Stat(IF), Expr(GT), Reg(0), Expr(Num(92)), Stat(INPUT), Reg(4), ELSE, Stat(IF), Expr(SUB), Reg(1), Expr(Num(-22)), Stat(IF), Expr(Num(-33)), Stat(INPUT), Reg(0), ELSE, Stat(INPUT), Reg(1), END, ELSE, Stat(INPUT), Reg(1), END, END, Stat(OUTPUT), Reg(0)]

PROBLEM SOLVED
